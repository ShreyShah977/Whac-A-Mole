


ARM Macro Assembler    Page 1 


    1 00000000         ; GPIO Test program - Dave Duguid, 2011
    2 00000000         ; Modified Trevor Douglas 2014
    3 00000000         
    4 00000000         
    5 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    6 00000000         ;;  Author: Shrey Shah
    7 00000000         ;;  SID: 200377176
    8 00000000         ;;  Date: November 27th 2020
    9 00000000         ;;  Class: ENSE 352 Fall 2020
   10 00000000         ;;
   11 00000000         ;;  This file contains all the code for the Whac-A-Mole 
                       arcade game. Each State is documented in detail with ref
                       erence to the PDF Handout.
   12 00000000         ;;  Please read the README.txt file before starting to g
                       et a high level overview
   13 00000000         ;;
   14 00000000         ;;  IMPORTANT NOTE: This code is for the older generatio
                       n of the board. The board variant is the STM32F100RB, an
                       d the project for uvision must be initalized with that i
                       n mind.
   15 00000000         ;;  
   16 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   17 00000000         
   18 00000000         
   19 00000000         ;;; Directives
   20 00000000                 PRESERVE8
   21 00000000                 THUMB
   22 00000000         
   23 00000000         
   24 00000000         ;;; Equates
   25 00000000         
   26 00000000 20001000 
                       INITIAL_MSP
                               EQU              0x20001000  ; Initial Main Stac
                                                            k Pointer Value
   27 00000000         
   28 00000000         
   29 00000000         ;PORT A GPIO - Base Addr: 0x40010800
   30 00000000 40010800 
                       GPIOA_CRL
                               EQU              0x40010800  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   31 00000000 40010804 
                       GPIOA_CRH
                               EQU              0x40010804  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   32 00000000 40010808 
                       GPIOA_IDR
                               EQU              0x40010808  ; (0x08) Port Input
                                                             Data Register
   33 00000000 4001080C 
                       GPIOA_ODR
                               EQU              0x4001080C  ; (0x0C) Port Outpu
                                                            t Data Register
   34 00000000 40010810 
                       GPIOA_BSRR
                               EQU              0x40010810  ; (0x10) Port Bit S



ARM Macro Assembler    Page 2 


                                                            et/Reset Register
   35 00000000 40010814 
                       GPIOA_BRR
                               EQU              0x40010814  ; (0x14) Port Bit R
                                                            eset Register
   36 00000000 40010818 
                       GPIOA_LCKR
                               EQU              0x40010818  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   37 00000000         
   38 00000000         ;PORT B GPIO - Base Addr: 0x40010C00
   39 00000000 40010C00 
                       GPIOB_CRL
                               EQU              0x40010C00  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   40 00000000 40010C04 
                       GPIOB_CRH
                               EQU              0x40010C04  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   41 00000000 40010C08 
                       GPIOB_IDR
                               EQU              0x40010C08  ; (0x08) Port Input
                                                             Data Register
   42 00000000 40010C0C 
                       GPIOB_ODR
                               EQU              0x40010C0C  ; (0x0C) Port Outpu
                                                            t Data Register
   43 00000000 40010C10 
                       GPIOB_BSRR
                               EQU              0x40010C10  ; (0x10) Port Bit S
                                                            et/Reset Register
   44 00000000 40010C14 
                       GPIOB_BRR
                               EQU              0x40010C14  ; (0x14) Port Bit R
                                                            eset Register
   45 00000000 40010C18 
                       GPIOB_LCKR
                               EQU              0x40010C18  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   46 00000000         
   47 00000000         ;The onboard LEDS are on port C bits 8 and 9
   48 00000000         ;PORT C GPIO - Base Addr: 0x40011000
   49 00000000 40011000 
                       GPIOC_CRL
                               EQU              0x40011000  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   50 00000000 40011004 
                       GPIOC_CRH
                               EQU              0x40011004  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   51 00000000 40011008 
                       GPIOC_IDR
                               EQU              0x40011008  ; (0x08) Port Input



ARM Macro Assembler    Page 3 


                                                             Data Register
   52 00000000 4001100C 
                       GPIOC_ODR
                               EQU              0x4001100C  ; (0x0C) Port Outpu
                                                            t Data Register
   53 00000000 40011010 
                       GPIOC_BSRR
                               EQU              0x40011010  ; (0x10) Port Bit S
                                                            et/Reset Register
   54 00000000 40011014 
                       GPIOC_BRR
                               EQU              0x40011014  ; (0x14) Port Bit R
                                                            eset Register
   55 00000000 40011018 
                       GPIOC_LCKR
                               EQU              0x40011018  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   56 00000000         
   57 00000000         ;Registers for configuring and enabling the clocks
   58 00000000         ;RCC Registers - Base Addr: 0x40021000
   59 00000000 40021000 
                       RCC_CR  EQU              0x40021000  ; Clock Control Reg
                                                            ister
   60 00000000 40021004 
                       RCC_CFGR
                               EQU              0x40021004  ; Clock Configurati
                                                            on Register
   61 00000000 40021008 
                       RCC_CIR EQU              0x40021008  ; Clock Interrupt R
                                                            egister
   62 00000000 4002100C 
                       RCC_APB2RSTR
                               EQU              0x4002100C  ; APB2 Peripheral R
                                                            eset Register
   63 00000000 40021010 
                       RCC_APB1RSTR
                               EQU              0x40021010  ; APB1 Peripheral R
                                                            eset Register
   64 00000000 40021014 
                       RCC_AHBENR
                               EQU              0x40021014  ; AHB Peripheral Cl
                                                            ock Enable Register
                                                            
   65 00000000         
   66 00000000 40021018 
                       RCC_APB2ENR
                               EQU              0x40021018  ; APB2 Peripheral C
                                                            lock Enable Registe
                                                            r  -- Used
   67 00000000         
   68 00000000 4002101C 
                       RCC_APB1ENR
                               EQU              0x4002101C  ; APB1 Peripheral C
                                                            lock Enable Registe
                                                            r
   69 00000000 40021020 
                       RCC_BDCR
                               EQU              0x40021020  ; Backup Domain Con



ARM Macro Assembler    Page 4 


                                                            trol Register
   70 00000000 40021024 
                       RCC_CSR EQU              0x40021024  ; Control/Status Re
                                                            gister
   71 00000000 4002102C 
                       RCC_CFGR2
                               EQU              0x4002102C  ; Clock Configurati
                                                            on Register 2
   72 00000000         
   73 00000000         ; Times for delay routines
   74 00000000         
   75 00000000 00030D40 
                       DELAYTIME
                               EQU              200000      ; TIMER
   76 00000000 000927C0 
                       PDTIME  EQU              600000      ; TIMER
   77 00000000 0007A120 
                       PDTIME2 EQU              500000      ; TIMER
   78 00000000 00055730 
                       REACT_TIME
                               EQU              350000      ; GameWaitTime
   79 00000000 00055730 
                       FAIL_TIME
                               EQU              350000      ; Fail Sequence Lig
                                                            ht Time
   80 00000000         ; Vector Table Mapped to Address 0 at Reset
   81 00000000                 AREA             RESET, Data, READONLY
   82 00000000                 EXPORT           __Vectors
   83 00000000         
   84 00000000 20001000 
                       __Vectors
                               DCD              INITIAL_MSP ; stack pointer val
                                                            ue when stack is em
                                                            pty
   85 00000004 00000000        DCD              Reset_Handler ; reset vector
   86 00000008         
   87 00000008                 AREA             MYCODE, CODE, READONLY
   88 00000000                 EXPORT           Reset_Handler
   89 00000000                 ENTRY
   90 00000000         
   91 00000000         Reset_Handler
                               PROC
   92 00000000         
   93 00000000         ;;;;;;;;;;;;;;;;;;
   94 00000000         ;; UC1 is in this block.
   95 00000000         ;; Just turns on all the neccesary GPIO Clocks 
   96 00000000         ;;;;;;;;;;;;;;;;;;
   97 00000000 F7FF FFFE       BL               GPIO_ClockInit
   98 00000004 F7FF FFFE       BL               GPIO_init
   99 00000008 F7FF FFFE       BL               IDLE
  100 0000000C         
  101 0000000C         
  102 0000000C                 ENDP
  103 0000000C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  104 0000000C         ;; Subroutines
  105 0000000C         ;;
  106 0000000C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  107 0000000C         
  108 0000000C         



ARM Macro Assembler    Page 5 


  109 0000000C         
  110 0000000C         ;;;;;;;;;;;;;;;;;;;;;;
  111 0000000C         ;; Turn on clocks
  112 0000000C         ;;
  113 0000000C         ;;
  114 0000000C         ;;;;;;;;;;;;;;;;;;;;;;
  115 0000000C         GPIO_ClockInit
                               PROC
  116 0000000C 4EA6            LDR              R6, =RCC_APB2ENR
  117 0000000E 6830            LDR              R0, [R6]    ;
  118 00000010 F040 003C       ORR              R0, #0x3C
  119 00000014 6030            STR              R0, [R6]
  120 00000016 F04F 0C01       LDR              R12, = 0x1  ;
  121 0000001A         
  122 0000001A         
  123 0000001A 4770            BX               LR
  124 0000001C                 ALIGN
  125 0000001C                 ENDP
  126 0000001C         GPIO_init
                               PROC
  127 0000001C F04F 3244       LDR              R2,= 0x44444444
  128 00000020 4FA2            LDR              R7,=GPIOA_CRH
  129 00000022 6839            LDR              R1, [R7]    ;
  130 00000024 603A            STR              R2, [R7]
  131 00000026 4FA2            LDR              R7,= GPIOB_CRH ;
  132 00000028 6839            LDR              R1, [R7]    ;
  133 0000002A         
  134 0000002A         
  135 0000002A 4770            BX               LR
  136 0000002C                 ALIGN
  137 0000002C                 ENDP
  138 0000002C         
  139 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;
  140 0000002C         ;;; Idle State - UC1 and UC2;
  141 0000002C         ;;; 
  142 0000002C         ;;;
  143 0000002C         ;;;
  144 0000002C         ; ENEL 384 Pushbuttons: SW2(Red): PB8, SW3(Black): PB9, 
                       SW4(Blue): PC12 *****NEW for 2015**** SW5(Green): PA5
  145 0000002C         ; ENEL 384 board LEDs: D1 - PA9, D2 - PA10, D3 - PA11, D
                       4 - PA12
  146 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;
  147 0000002C         
  148 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  149 0000002C         ;; This IDLE State will constantly flash 
  150 0000002C         ;; a pattern of lights from 
  151 0000002C         ;; left to right in sequence 
  152 0000002C         ;; until a button is pushed
  153 0000002C         ;; 
  154 0000002C         ;; UC2 ---- UC2 ---- UC2
  155 0000002C         ;; Waiting for Player Loop
  156 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  157 0000002C         
  158 0000002C         
  159 0000002C         IDLE    PROC
  160 0000002C         ;;;;;;;;;;;;;;;;;;;;;
  161 0000002C         ;;; This little tidbit actually stores the value of the 
                       REACT_TIME into a memory location.
  162 0000002C         ;;; Where we can modify and reuse it continously.



ARM Macro Assembler    Page 6 


  163 0000002C         ;;; This is modified when a user has pressed the correct
                        button, the timer will be loaded, decremented and store
                       d back for future use.
  164 0000002C         ;;;;;;;;;;;;;;;;;;;;;
  165 0000002C F8DF 8284       LDR              R8,= 0x20001000 ;
  166 00000030 48A1            LDR              R0,= REACT_TIME ;
  167 00000032 F8C8 0000       STR              R0, [R8]    ;
  168 00000036 B500            PUSH             {LR}
  169 00000038 F04F 0000       LDR              R0,= 0x0    ;
  170 0000003C F04F 0800       LDR              R8,= 0x0    ;
  171 00000040         
  172 00000040 F04F 0130       LDR              R1,= 0x30   ;
  173 00000044         GameWaitPattern
  174 00000044         
  175 00000044 4899            LDR              R0,= GPIOA_CRH ;
  176 00000046 6001            STR              R1, [R0]    ;
  177 00000048 F8DF 8270       LDR              R8,= DELAYTIME
  178 0000004C F7FF FFFE       BL               R8SecondsDelay
  179 00000050         
  180 00000050         
  181 00000050         
  182 00000050 F7FF FFFE       BL               CheckforUser
  183 00000054 F5B1 3F40       CMP              R1, #0x30000 ; ;; Since we turn
                                                             on the light in se
                                                            quence, we must res
                                                            et back to the firs
                                                            t light at the end.
                                                            
  184 00000058 BF08 2103       MOVEQ            R1, #0x3    ;  ;; This does exa
                                                            ctly that by taking
                                                             in the location of
                                                             which light we're 
                                                            at. then resets it.
                                                            
  185 0000005C EA4F 1101       LSL              R1, R1, #0x4 ;;
  186 00000060         
  187 00000060 F85D EB04       POP              {LR}        ;
  188 00000064 E7EE            B                GameWaitPattern
  189 00000066 00 00           ALIGN
  190 00000068                 ENDP
  191 00000068         CheckforUser
                               PROC
  192 00000068 4A95            LDR              R2,= GPIOB_IDR ; Loading in the
                                                             input for the Push
                                                            Buttons assigned at
                                                             Port B;
  193 0000006A 6812            LDR              R2, [R2]    ; 
  194 0000006C EA4F 2212       LSR              R2, R2, #8  ; ;; We isolate the
                                                             bits corresponding
                                                             to a button press 
                                                            from either Red or 
                                                            Black.
  195 00000070 2ADF            CMP              R2, #0xDF   ;
  196 00000072 DBFE            BLT              GameStart
  197 00000074 F04F 0200       LDR              R2,= 0x0    ;
  198 00000078 4A92            LDR              R2,= GPIOC_IDR ; ;; Check Blue 
                                                            Button at PC12
  199 0000007A 6812            LDR              R2, [R2]    ;
  200 0000007C EA4F 3212       LSR              R2, R2, #12 ;



ARM Macro Assembler    Page 7 


  201 00000080 2A0E            CMP              R2, #0xE    ;
  202 00000082 D0FE            BEQ              GameStart
  203 00000084 F04F 0200       LDR              R2,= 0x0    ;
  204 00000088 4A8F            LDR              R2,= GPIOA_IDR ;; Check Green B
                                                            utton at PA5
  205 0000008A 6812            LDR              R2, [R2]    ;
  206 0000008C EA4F 1252       LSR              R2, R2, #5  ;
  207 00000090 F002 0201       AND              R2, R2, #0x1 ;
  208 00000094 B352            CBZ              R2, GameStart ;
  209 00000096         
  210 00000096         
  211 00000096 4770            BX               LR          ;
  212 00000098                 ALIGN                        ;
  213 00000098                 ENDP                         ;
  214 00000098         
  215 00000098         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  216 00000098         ;; Here is our generic timer or delay function
  217 00000098         ;; It takes in the value passed into R8 and returns when
                        
  218 00000098         ;; The variable is 0.
  219 00000098         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  220 00000098         
  221 00000098         
  222 00000098         R8SecondsDelay
                               PROC
  223 00000098 F1A8 0801       SUB              R8,R8,#0x1  ;
  224 0000009C F1B8 0F00       CMP              R8, #0      ;
  225 000000A0 DD00            BLE              endDelay
  226 000000A2 DCFE            BGT              R8SecondsDelay
  227 000000A4                 ALIGN
  228 000000A4                 ENDP
  229 000000A4         endDelay
  230 000000A4 4770            BX               LR          ;
  231 000000A6         
  232 000000A6         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  233 000000A6         ;; This is a generic CheckButtons Function
  234 000000A6         ;; It checks for any input in all four buttons
  235 000000A6         ;; i.e ENEL 384 Pushbuttons: SW2(Red): PB8, SW3(Black): 
                       PB9, SW4(Blue): PC12 SW5(Green): PA5
  236 000000A6         ;; And then shifts, ORR's and operates so that it forms 
                       a binary number.
  237 000000A6         ;; For example, if the left most button is pressed (Red 
                       - PB8)
  238 000000A6         ;; Then the resulting binary number generated is 0001.
  239 000000A6         ;; For the Blue - PC12, the Resulting binary number is 0
                       100;
  240 000000A6         ;; This is what's used to determine the pass/fail logic.
                       
  241 000000A6         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  242 000000A6         
  243 000000A6         
  244 000000A6         
  245 000000A6         CheckButtons
                               PROC
  246 000000A6 F04F 0500       LDR              R5,= 0x0    ;
  247 000000AA F8DF 8214       LDR              R8,= GPIOB_IDR
  248 000000AE F8D8 5000       LDR              R5, [R8]    ;
  249 000000B2 EA4F 2515       LSR              R5, R5, #8  ;
  250 000000B6 F005 050F       AND              R5, R5, #0xF ;



ARM Macro Assembler    Page 8 


  251 000000BA F085 050F       EOR              R5, R5, #0xF ;
  252 000000BE F8DF 8204       LDR              R8,= GPIOC_IDR
  253 000000C2 F8D8 4000       LDR              R4, [R8]    ;
  254 000000C6 EA4F 3414       LSR              R4, R4, #12 ;
  255 000000CA 2C0E            CMP              R4, #0xE    ;
  256 000000CC BF08 F045 
              0504             ORREQ            R5, #0x4    ;
  257 000000D2 F8DF 81F4       LDR              R8,= GPIOA_IDR ;
  258 000000D6 F8D8 4000       LDR              R4, [R8]    ;
  259 000000DA EA4F 1454       LSR              R4, R4, #5  ;
  260 000000DE F004 0401       AND              R4, R4, #1  ;
  261 000000E2 2C00            CMP              R4, #0x0    ; 
  262 000000E4 BF08 F045 
              0508             ORREQ            R5, R5, #0x8 ; 
  263 000000EA 4770            BX               LR
  264 000000EC                 ALIGN
  265 000000EC                 ENDP
  266 000000EC         
  267 000000EC         
  268 000000EC         
  269 000000EC         
  270 000000EC         
  271 000000EC         
  272 000000EC         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;
  273 000000EC         ;; UC3 ---- UC3 ---- UC3
  274 000000EC         ;; GameStart is the actual game function, this is initia
                       ted once the user has moved on from IDLE or wait state.
  275 000000EC         ;;
  276 000000EC         ;; It contains a PreLimWaitFunction on line 280. Loaded 
                       with the PDTIME2, a different timer value used for Preli
                       mWait
  277 000000EC         ;;
  278 000000EC         ;; Since we have an easy to use abstract timer function,
                        we just use that.
  279 000000EC         ;;
  280 000000EC         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;
  281 000000EC         GameStart
                               PROC
  282 000000EC B500            PUSH             {LR}        ; ;; We push the LR
                                                             here so that we ca
                                                            n make calls to oth
                                                            er functions within
                                                             this one.
  283 000000EE F04F 0200       LDR              R2, = 0x0   ;
  284 000000F2         
  285 000000F2         continuePlay
  286 000000F2 4976            LDR              R1,= 0x4444444 ;
  287 000000F4         
  288 000000F4 4F6D            LDR              R7, =GPIOA_CRH ; 
  289 000000F6 6039            STR              R1, [R7]    ;
  290 000000F8 F8DF 81D4       LDR              R8, = PDTIME2 ;
  291 000000FC F7FF FFFE       BL               R8SecondsDelay ;
  292 00000100         
  293 00000100         ;;;;;;
  294 00000100         ;; The above sequence is used to indicate to the user th
                       at the game has started. 
  295 00000100         ;; That is, turning off all lights for a brief stint



ARM Macro Assembler    Page 9 


  296 00000100         ;;;;;;
  297 00000100         
  298 00000100 F04F 0A00       LDR              R10, = 0x0  ;
  299 00000104         ;; Here we dive into the main game loop.
  300 00000104         loopmain                             ;
  301 00000104         
  302 00000104         ;; Our Random number generator is called here. Jump to L
                       ine 314
  303 00000104 F7FF FFFE       BL               Rand        ;
  304 00000108         
  305 00000108         ;; Since we know that the Random number is stored in R4,
                        we simply compare it to the possible values that it can
                        be.
  306 00000108         ;; We turn on the corresponding LED based on the random 
                       number.
  307 00000108 2C00            CMP              R4, #0x0    ;
  308 0000010A D0FE            BEQ              LED1        ;
  309 0000010C F1B4 4F00       CMP              R4, #0x80000000 ;
  310 00000110 D0FE            BEQ              LED2        ;
  311 00000112 F1B4 4F40       CMP              R4, #0xC0000000 ;
  312 00000116 D0FE            BEQ              LED3        ;
  313 00000118 F1B4 4F80       CMP              R4, #0x40000000 ;
  314 0000011C D0FE            BEQ              LED4        ; 
  315 0000011E         
  316 0000011E F04F 0A00       LDR              R10, = 0x0  ;
  317 00000122 D1EF            BNE              loopmain
  318 00000124         
  319 00000124         
  320 00000124         FinishedWinAnim
  321 00000124 F85D EB04       POP              {LR}
  322 00000128 E7FE            B                IDLE        ;
  323 0000012A 00 00           ALIGN
  324 0000012C                 ENDP
  325 0000012C         
  326 0000012C         Rand    PROC
  327 0000012C         ;; Rand Generator
  328 0000012C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  329 0000012C         ;; Our random number generator is a very simple concept.
                       
  330 0000012C         ;; Take two large prime numbers. Add some relatively sma
                       ll number to one and multiply the same small number to t
                       he other
  331 0000012C         ;; Then And them with some number. This will produce bit
                       s in the very left most row.
  332 0000012C         ;; The combinations are generally some sequence of 0, 4,
                        8 or C in the left most hex digit.
  333 0000012C         ;; The sequence of these combinations are random since t
                       he small number is dependant on the current game level. 
                       
  334 0000012C         ;; Further adding randomization to the process
  335 0000012C         ;;
  336 0000012C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  337 0000012C 4969            LDR              R1,= 5000077 ;
  338 0000012E F8DF A1A4       LDR              R10, = 5000077 ;
  339 00000132 FB0C FC01       MUL              R12,R1      ;
  340 00000136 44D4            ADD              R12, R10    ;
  341 00000138 F00C 4440       AND              R4, R12, #0xC0000000 ;
  342 0000013C         
  343 0000013C 4770            BX               LR



ARM Macro Assembler    Page 10 


  344 0000013E 00 00           ALIGN
  345 00000140                 ENDP
  346 00000140         
  347 00000140         
  348 00000140         
  349 00000140         
  350 00000140         
  351 00000140         
  352 00000140         
  353 00000140         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  354 00000140         ;;;   UC4 ---- UC4 ---- UC4
  355 00000140         ;;; Here is out Win State, i.e when the user has sucessf
                       ully got the correct button pressed 16 times in sequence
                       .
  356 00000140         ;;; It displays a short animation of the lights back and
                        forth a couple of times.
  357 00000140         ;;; Then exits to IDLE state, awaiting the next user.
  358 00000140         ;;;
  359 00000140         ;;; It displays this animation of lights for a certain p
                       eriod of time, around 10s.
  360 00000140         ;;;
  361 00000140         ;;;
  362 00000140         ;;;
  363 00000140         ;;; The user's proficiency is displayed just by reaching
                        to this state. Since there are only 16 total levels, 
  364 00000140         ;;; upon passing the 16th leads to this function
  365 00000140         ;;; 
  366 00000140         ;;;
  367 00000140         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  368 00000140         
  369 00000140         WinState
                               PROC
  370 00000140 F04F 0332       LDR              R3,= 0x32   ;
  371 00000144 4F59            LDR              R7,= GPIOA_CRH ;
  372 00000146         WinCycleLoop
  373 00000146 F243 0130       LDR              R1,= 0x3030 ;
  374 0000014A 6039            STR              R1, [R7]    ;
  375 0000014C F8DF 816C       LDR              R8,= DELAYTIME
  376 00000150 F7FF FFFE       BL               R8SecondsDelay ;
  377 00000154 F1A3 0301       SUB              R3, R3, #1  ;
  378 00000158 EA4F 1101       LSL              R1, R1, #4  ;
  379 0000015C 6039            STR              R1, [R7]    ;
  380 0000015E F8DF 815C       LDR              R8,= DELAYTIME
  381 00000162 F7FF FFFE       BL               R8SecondsDelay ;
  382 00000166 F1A3 0301       SUB              R3, R3, #1  ;
  383 0000016A B103            CBZ              R3, resetBackToIDLE
  384 0000016C E7EB            B                WinCycleLoop
  385 0000016E         resetBackToIDLE
  386 0000016E E7FE            B                IDLE
  387 00000170                 ENDP
  388 00000170                 ALIGN
  389 00000170         
  390 00000170         
  391 00000170         
  392 00000170         
  393 00000170         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  394 00000170         ;; LEDX contains the code to turn on an LED, where X is 
                       (#1-#4).
  395 00000170         ;;



ARM Macro Assembler    Page 11 


  396 00000170         ;; Then it also loads a value from the memory address of
                        the timer.
  397 00000170         ;; Which is decremented each cycle of the TimerLoopX whe
                       re X is the LED number
  398 00000170         ;; 
  399 00000170         ;; We call CheckButtons each time on this cycle to ensur
                       e that we always record if a button has been pressed.
  400 00000170         ;;
  401 00000170         ;; If the incorrect button has been pressed we will know
                        instantly since the binary number outputed from CheckBu
                       ttons 
  402 00000170         ;; will be different than the one we expect
  403 00000170         ;;
  404 00000170         ;; As such there are two ways to reach FailState from he
                       re, that is:
  405 00000170         ;; 1. Exit to Fail state when the incorrect button has b
                       een pressed.
  406 00000170         ;; 2. Exit to fail state when the timer has been expired
                       
  407 00000170         ;; These are both two different events.
  408 00000170         ;;
  409 00000170         ;;
  410 00000170         ;; Lastly, if the correct button has been pressed we wil
                       l proceed to the TurnOffState
  411 00000170         ;; Where the corresponding light turns off. And the leve
                       l is incremented by one.
  412 00000170         ;;
  413 00000170         ;;
  414 00000170         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  415 00000170         
  416 00000170         
  417 00000170         
  418 00000170         
  419 00000170         LED1    PROC
  420 00000170 F04F 0330       LDR              R3, = 0x30  ;
  421 00000174 603B            STR              R3, [R7]    ;
  422 00000176 F04F 0300       LDR              R3, = 0x0   ;
  423 0000017A 4E4E            LDR              R6, = 0x20001000 ;
  424 0000017C 6836            LDR              R6, [R6]    ;
  425 0000017E         TimerLoop1
  426 0000017E B500            PUSH             {LR}
  427 00000180 F7FF FFFE       BL               CheckButtons
  428 00000184 F85D EB04       POP              {LR}
  429 00000188 2D01            CMP              R5, #0x1    ;
  430 0000018A D0FE            BEQ              TurnOff1    ;
  431 0000018C DCFE            BGT              FailState
  432 0000018E F1A6 0602       SUB              R6, R6, #2  ;
  433 00000192 B3DE            CBZ              R6, FailState
  434 00000194 E7F3            B                TimerLoop1
  435 00000196 00 00           ALIGN
  436 00000198                 ENDP
  437 00000198         
  438 00000198         
  439 00000198         
  440 00000198         LED2    PROC
  441 00000198 F44F 7340       LDR              R3, = 0x300 ;
  442 0000019C 603B            STR              R3, [R7]    ;
  443 0000019E 4E45            LDR              R6, = 0x20001000 ;
  444 000001A0 6836            LDR              R6, [R6]    ;



ARM Macro Assembler    Page 12 


  445 000001A2         TimerLoop2
  446 000001A2 B500            PUSH             {LR}
  447 000001A4 F7FF FFFE       BL               CheckButtons
  448 000001A8 F85D EB04       POP              {LR}
  449 000001AC 2D02            CMP              R5, #0x2    ;                  
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                             
  450 000001AE D0FE            BEQ              TurnOff1    ;
  451 000001B0 2D01            CMP              R5, #0x1    ;
  452 000001B2 DAFE            BGE              FailState
  453 000001B4 F1A6 0602       SUB              R6, R6, #2  ;
  454 000001B8 B346            CBZ              R6, FailState
  455 000001BA E7F2            B                TimerLoop2
  456 000001BC                 ALIGN
  457 000001BC                 ENDP
  458 000001BC         
  459 000001BC         ;;;;
  460 000001BC         ;; Assembly code doesn't like being spaced apart, this a
                       cts as a springboard to let us get back to our original 
                       state.
  461 000001BC         ;; (used in the Turn Off Function)
  462 000001BC         ;;;;
  463 000001BC         JumpWin PROC
  464 000001BC E7FE            B                WinState
  465 000001BE 00 00           ALIGN
  466 000001C0                 ENDP
  467 000001C0         
  468 000001C0         
  469 000001C0         LED3    PROC
  470 000001C0 F44F 5340       LDR              R3, = 0x3000 ;
  471 000001C4 603B            STR              R3, [R7]    ;
  472 000001C6 4E3B            LDR              R6, = 0x20001000 ;
  473 000001C8 6836            LDR              R6, [R6]    ;
  474 000001CA         TimerLoop3
  475 000001CA B500            PUSH             {LR}
  476 000001CC F7FF FFFE       BL               CheckButtons
  477 000001D0 F85D EB04       POP              {LR}
  478 000001D4 2D04            CMP              R5, #0x4    ;      
  479 000001D6 D0FE            BEQ              TurnOff1    ;
  480 000001D8 2D01            CMP              R5, #0x1    ;
  481 000001DA DAFE            BGE              FailState
  482 000001DC F1A6 0602       SUB              R6, R6, #2  ;
  483 000001E0 B1A6            CBZ              R6, FailState
  484 000001E2 E7F2            B                TimerLoop3
  485 000001E4                 ALIGN
  486 000001E4                 ENDP
  487 000001E4         
  488 000001E4         
  489 000001E4                 ALIGN
  490 000001E4         LED4    PROC
  491 000001E4 F44F 3340       LDR              R3, = 0x30000 ;
  492 000001E8 603B            STR              R3, [R7]    ;



ARM Macro Assembler    Page 13 


  493 000001EA 4E32            LDR              R6, = 0x20001000 ;
  494 000001EC 6836            LDR              R6, [R6]    ;
  495 000001EE         TimerLoop4
  496 000001EE B500            PUSH             {LR}
  497 000001F0 F7FF FFFE       BL               CheckButtons
  498 000001F4 F85D EB04       POP              {LR}
  499 000001F8 2D08            CMP              R5, #0x8    ;
  500 000001FA D0FE            BEQ              TurnOff1    ;
  501 000001FC 2D01            CMP              R5, #0x1    ;
  502 000001FE DAFE            BGE              FailState   ;
  503 00000200 B333            CBZ              R3, TurnOff1 ;
  504 00000202 F1A6 0602       SUB              R6, R6, #2  ;
  505 00000206 B10E            CBZ              R6, FailState
  506 00000208 E7F1            B                TimerLoop4
  507 0000020A 00 00           ALIGN
  508 0000020C                 ENDP
  509 0000020C         
  510 0000020C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  511 0000020C         ;;  UC5 ---- UC5 ---- UC5
  512 0000020C         ;; Here is our fail state. Where the user has either exp
                       ired the timer or pressed the wrong button in the curren
                       t level.
  513 0000020C         ;; It displays all lights briefly to let the user know t
                       he game has ended.
  514 0000020C         ;; Then it flashes the lights to show the binary number 
                       of the highest level completed.
  515 0000020C         ;; Lastly exiting to the IDLE loop (UC2) awaiting the ne
                       xt user. 
  516 0000020C         ;;
  517 0000020C         ;;
  518 0000020C         ;; All numbers from 1 - 15 are represented. 
  519 0000020C         ;; So that if the user fails on the very last level, the
                       n all lights will flash to indicate 15 in binary
  520 0000020C         ;;  
  521 0000020C         ;; If the user fails on the very first level (techincall
                       y level 0), then no lights flash and it goes straight to
                        the IDLE loop (UC2);
  522 0000020C         ;;
  523 0000020C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  524 0000020C         
  525 0000020C         FailState
                               PROC
  526 0000020C 4F27            LDR              R7,= GPIOA_CRH ;
  527 0000020E F04F 0005       LDR              R0,= 0x5    ;
  528 00000212 4931            LDR              R1,= 0x33330 ;
  529 00000214 6039            STR              R1, [R7]    ;
  530 00000216 F8DF 80A4       LDR              R8,= DELAYTIME
  531 0000021A F7FF FFFE       BL               R8SecondsDelay ;
  532 0000021E B18A            CBZ              R2, leave   ;
  533 00000220 F7FF FFFE       BL               GetBitCount
  534 00000224         
  535 00000224         Failloop
  536 00000224 6039            STR              R1, [R7]    ;
  537 00000226 F8DF 8090       LDR              R8,= FAIL_TIME
  538 0000022A F7FF FFFE       BL               R8SecondsDelay ;
  539 0000022E F04F 0200       LDR              R2,= 0x0    ;
  540 00000232 603A            STR              R2, [R7]    ;
  541 00000234 F8DF 8080       LDR              R8,= FAIL_TIME ;
  542 00000238 F7FF FFFE       BL               R8SecondsDelay



ARM Macro Assembler    Page 14 


  543 0000023C F1A0 0001       SUB              R0, R0, #1  ;
  544 00000240 B100            CBZ              R0, leave
  545 00000242 E7EF            B                Failloop
  546 00000244         leave
  547 00000244 BC7E            POP              {R1,R2,R3,R4,R5,R6}
  548 00000246 F8DF 8074       LDR              R8,= DELAYTIME ;
  549 0000024A F7FF FFFE       BL               R8SecondsDelay
  550 0000024E E7FE            B                IDLE
  551 00000250                 ALIGN
  552 00000250                 ENDP
  553 00000250         
  554 00000250         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  555 00000250         ;; Here is the Turn Off State.
  556 00000250         ;; We arrive here everytime the correct button correspon
                       ding to the light has been pressed.
  557 00000250         ;;
  558 00000250         ;; There are several things happening here. 
  559 00000250         ;; Most notably, we turn off the light.
  560 00000250         ;; Then, we load in the old timer value for REACT_TIME
  561 00000250         ;; And decrement it by the value of the level and a smal
                       l number 0x400.
  562 00000250         ;; This way, each subsequent level is "harder" since the
                        user has less time to react to.
  563 00000250         ;; 
  564 00000250         ;; Because we always store the value of time in memory w
                       e just plug it back into 0x20001000
  565 00000250         ;;
  566 00000250         ;; If and only if the value of R2 is 16. (We have achiev
                       ed 16 button presses) then we "Win" the game and proceed
                        to the WinState
  567 00000250         ;;
  568 00000250         ;; Otherwise, we just proceed to the game loop and conti
                       nue to the next level.
  569 00000250         ;;
  570 00000250         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  571 00000250         
  572 00000250         TurnOff1
                               PROC
  573 00000250 F04F 0100       LDR              R1, =  0x0  ;
  574 00000254 6039            STR              R1, [R7]    ;
  575 00000256 F44F 6A80       LDR              R10,= 0x400
  576 0000025A         
  577 0000025A 4E16            LDR              R6, = 0x20001000 ;
  578 0000025C 6831            LDR              R1, [R6]    ;
  579 0000025E F102 0201       ADD              R2, R2, #1  ;
  580 00000262 FB0A FA02       MUL              R10, R10, R2 ;
  581 00000266 46D4            MOV              R12, R10    ;
  582 00000268 EBA1 010A       SUB              R1, R1, R10 ;
  583 0000026C 6031            STR              R1, [R6]    ;
  584 0000026E         
  585 0000026E 2A10            CMP              R2, #16     ;
  586 00000270 D0FE            BEQ              JumpWin
  587 00000272 E73E            B                continuePlay ;
  588 00000274                 ALIGN
  589 00000274                 ENDP
  590 00000274         GetBitCount
                               PROC
  591 00000274         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  592 00000274         ;; Obtain the level number and represent 



ARM Macro Assembler    Page 15 


  593 00000274         ;; it as a sequence of lights in binary
  594 00000274         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  595 00000274         ;; Here we modify the level number so that it correspond
                       s to a binary number within our LED's.
  596 00000274         ;; i.e Lets say we reach level 5, 5 in binary is 0101. A
                       nd so we turn on the 2nd and 4th LEDS from the left.
  597 00000274         ;; It's interesting to note that we have to keep in mind
                        that although the LED's go left to right, each one is t
                       urned on by an increasing value of 0x30.
  598 00000274         ;; We've made our loop so that this happens efficently. 
                       It returns the correct hex number to turn on the lights 
                       in R1.
  599 00000274 F04F 0400       LDR              R4,= 0x0    ;
  600 00000278 F04F 0508       LDR              R5,= 0x8    ;
  601 0000027C F04F 0830       LDR              R8,= 0x30   ;
  602 00000280         GetDigits
  603 00000280 B155            CBZ              R5, Done    ;
  604 00000282         
  605 00000282 EA02 0105       AND              R1, R2, R5  ;
  606 00000286 42A9            CMP              R1, R5      ;
  607 00000288 BF08 EA44 
              0408             ORREQ            R4, R8      ;
  608 0000028E EA4F 1808       LSL              R8, R8, #4  ;
  609 00000292 EA4F 0555       LSR              R5, R5, #1  ;
  610 00000296 E7F3            B                GetDigits
  611 00000298         Done
  612 00000298 F04F 0100       LDR              R1,= 0      ;
  613 0000029C 4621            MOV              R1, R4      ;
  614 0000029E F04F 0400       LDR              R4,= 0      ;
  615 000002A2 F04F 0800       LDR              R8,= 0      ;
  616 000002A6         
  617 000002A6 4770            BX               LR
  618 000002A8                 ALIGN
  619 000002A8                 ENDP
  620 000002A8         
  621 000002A8         Finish
  622 000002A8         
  623 000002A8                 END
              40021018 
              40010804 
              40010C04 
              20001000 
              00055730 
              00030D40 
              40010C08 
              40011008 
              40010808 
              04444444 
              0007A120 
              004C4B8D 
              00033330 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\fp1.d -o.\objects\fp1.o -IC:\Users\shrey\Documents\Cours
es\ENSE352\Whac-A-Mole\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Devic
e\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefin
e="__UVISION_VERSION SETA 521" --predefine="STM32F10X_MD_VL SETA 1" --list=.\li
stings\fp1.lst FP1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 81 in file FP1.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 84 in file FP1.s
   Uses
      At line 82 in file FP1.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CheckButtons 000000A6

Symbol: CheckButtons
   Definitions
      At line 245 in file FP1.s
   Uses
      At line 427 in file FP1.s
      At line 447 in file FP1.s
      At line 476 in file FP1.s
      At line 497 in file FP1.s

CheckforUser 00000068

Symbol: CheckforUser
   Definitions
      At line 191 in file FP1.s
   Uses
      At line 182 in file FP1.s
Comment: CheckforUser used once
Done 00000298

Symbol: Done
   Definitions
      At line 611 in file FP1.s
   Uses
      At line 603 in file FP1.s
Comment: Done used once
FailState 0000020C

Symbol: FailState
   Definitions
      At line 525 in file FP1.s
   Uses
      At line 431 in file FP1.s
      At line 433 in file FP1.s
      At line 452 in file FP1.s
      At line 454 in file FP1.s
      At line 481 in file FP1.s
      At line 483 in file FP1.s
      At line 502 in file FP1.s
      At line 505 in file FP1.s

Failloop 00000224

Symbol: Failloop
   Definitions
      At line 535 in file FP1.s
   Uses
      At line 545 in file FP1.s
Comment: Failloop used once
Finish 000002A8

Symbol: Finish
   Definitions
      At line 621 in file FP1.s
   Uses
      None
Comment: Finish unused
FinishedWinAnim 00000124



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: FinishedWinAnim
   Definitions
      At line 320 in file FP1.s
   Uses
      None
Comment: FinishedWinAnim unused
GPIO_ClockInit 0000000C

Symbol: GPIO_ClockInit
   Definitions
      At line 115 in file FP1.s
   Uses
      At line 97 in file FP1.s
Comment: GPIO_ClockInit used once
GPIO_init 0000001C

Symbol: GPIO_init
   Definitions
      At line 126 in file FP1.s
   Uses
      At line 98 in file FP1.s
Comment: GPIO_init used once
GameStart 000000EC

Symbol: GameStart
   Definitions
      At line 281 in file FP1.s
   Uses
      At line 196 in file FP1.s
      At line 202 in file FP1.s
      At line 208 in file FP1.s

GameWaitPattern 00000044

Symbol: GameWaitPattern
   Definitions
      At line 173 in file FP1.s
   Uses
      At line 188 in file FP1.s
Comment: GameWaitPattern used once
GetBitCount 00000274

Symbol: GetBitCount
   Definitions
      At line 590 in file FP1.s
   Uses
      At line 533 in file FP1.s
Comment: GetBitCount used once
GetDigits 00000280

Symbol: GetDigits
   Definitions
      At line 602 in file FP1.s
   Uses
      At line 610 in file FP1.s
Comment: GetDigits used once
IDLE 0000002C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: IDLE
   Definitions
      At line 159 in file FP1.s
   Uses
      At line 99 in file FP1.s
      At line 322 in file FP1.s
      At line 386 in file FP1.s
      At line 550 in file FP1.s

JumpWin 000001BC

Symbol: JumpWin
   Definitions
      At line 463 in file FP1.s
   Uses
      At line 586 in file FP1.s
Comment: JumpWin used once
LED1 00000170

Symbol: LED1
   Definitions
      At line 419 in file FP1.s
   Uses
      At line 308 in file FP1.s
Comment: LED1 used once
LED2 00000198

Symbol: LED2
   Definitions
      At line 440 in file FP1.s
   Uses
      At line 310 in file FP1.s
Comment: LED2 used once
LED3 000001C0

Symbol: LED3
   Definitions
      At line 469 in file FP1.s
   Uses
      At line 312 in file FP1.s
Comment: LED3 used once
LED4 000001E4

Symbol: LED4
   Definitions
      At line 490 in file FP1.s
   Uses
      At line 314 in file FP1.s
Comment: LED4 used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 87 in file FP1.s
   Uses
      None
Comment: MYCODE unused
R8SecondsDelay 00000098




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: R8SecondsDelay
   Definitions
      At line 222 in file FP1.s
   Uses
      At line 178 in file FP1.s
      At line 226 in file FP1.s
      At line 291 in file FP1.s
      At line 376 in file FP1.s
      At line 381 in file FP1.s
      At line 531 in file FP1.s
      At line 538 in file FP1.s
      At line 542 in file FP1.s
      At line 549 in file FP1.s

Rand 0000012C

Symbol: Rand
   Definitions
      At line 326 in file FP1.s
   Uses
      At line 303 in file FP1.s
Comment: Rand used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 91 in file FP1.s
   Uses
      At line 85 in file FP1.s
      At line 88 in file FP1.s

TimerLoop1 0000017E

Symbol: TimerLoop1
   Definitions
      At line 425 in file FP1.s
   Uses
      At line 434 in file FP1.s
Comment: TimerLoop1 used once
TimerLoop2 000001A2

Symbol: TimerLoop2
   Definitions
      At line 445 in file FP1.s
   Uses
      At line 455 in file FP1.s
Comment: TimerLoop2 used once
TimerLoop3 000001CA

Symbol: TimerLoop3
   Definitions
      At line 474 in file FP1.s
   Uses
      At line 484 in file FP1.s
Comment: TimerLoop3 used once
TimerLoop4 000001EE

Symbol: TimerLoop4
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 495 in file FP1.s
   Uses
      At line 506 in file FP1.s
Comment: TimerLoop4 used once
TurnOff1 00000250

Symbol: TurnOff1
   Definitions
      At line 572 in file FP1.s
   Uses
      At line 430 in file FP1.s
      At line 450 in file FP1.s
      At line 479 in file FP1.s
      At line 500 in file FP1.s
      At line 503 in file FP1.s

WinCycleLoop 00000146

Symbol: WinCycleLoop
   Definitions
      At line 372 in file FP1.s
   Uses
      At line 384 in file FP1.s
Comment: WinCycleLoop used once
WinState 00000140

Symbol: WinState
   Definitions
      At line 369 in file FP1.s
   Uses
      At line 464 in file FP1.s
Comment: WinState used once
continuePlay 000000F2

Symbol: continuePlay
   Definitions
      At line 285 in file FP1.s
   Uses
      At line 587 in file FP1.s
Comment: continuePlay used once
endDelay 000000A4

Symbol: endDelay
   Definitions
      At line 229 in file FP1.s
   Uses
      At line 225 in file FP1.s
Comment: endDelay used once
leave 00000244

Symbol: leave
   Definitions
      At line 546 in file FP1.s
   Uses
      At line 532 in file FP1.s
      At line 544 in file FP1.s

loopmain 00000104




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: loopmain
   Definitions
      At line 300 in file FP1.s
   Uses
      At line 317 in file FP1.s
Comment: loopmain used once
resetBackToIDLE 0000016E

Symbol: resetBackToIDLE
   Definitions
      At line 385 in file FP1.s
   Uses
      At line 383 in file FP1.s
Comment: resetBackToIDLE used once
35 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DELAYTIME 00030D40

Symbol: DELAYTIME
   Definitions
      At line 75 in file FP1.s
   Uses
      At line 177 in file FP1.s
      At line 375 in file FP1.s
      At line 380 in file FP1.s
      At line 530 in file FP1.s
      At line 548 in file FP1.s

FAIL_TIME 00055730

Symbol: FAIL_TIME
   Definitions
      At line 79 in file FP1.s
   Uses
      At line 537 in file FP1.s
      At line 541 in file FP1.s

GPIOA_BRR 40010814

Symbol: GPIOA_BRR
   Definitions
      At line 35 in file FP1.s
   Uses
      None
Comment: GPIOA_BRR unused
GPIOA_BSRR 40010810

Symbol: GPIOA_BSRR
   Definitions
      At line 34 in file FP1.s
   Uses
      None
Comment: GPIOA_BSRR unused
GPIOA_CRH 40010804

Symbol: GPIOA_CRH
   Definitions
      At line 31 in file FP1.s
   Uses
      At line 128 in file FP1.s
      At line 175 in file FP1.s
      At line 288 in file FP1.s
      At line 371 in file FP1.s
      At line 526 in file FP1.s

GPIOA_CRL 40010800

Symbol: GPIOA_CRL
   Definitions
      At line 30 in file FP1.s
   Uses
      None
Comment: GPIOA_CRL unused
GPIOA_IDR 40010808




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIOA_IDR
   Definitions
      At line 32 in file FP1.s
   Uses
      At line 204 in file FP1.s
      At line 257 in file FP1.s

GPIOA_LCKR 40010818

Symbol: GPIOA_LCKR
   Definitions
      At line 36 in file FP1.s
   Uses
      None
Comment: GPIOA_LCKR unused
GPIOA_ODR 4001080C

Symbol: GPIOA_ODR
   Definitions
      At line 33 in file FP1.s
   Uses
      None
Comment: GPIOA_ODR unused
GPIOB_BRR 40010C14

Symbol: GPIOB_BRR
   Definitions
      At line 44 in file FP1.s
   Uses
      None
Comment: GPIOB_BRR unused
GPIOB_BSRR 40010C10

Symbol: GPIOB_BSRR
   Definitions
      At line 43 in file FP1.s
   Uses
      None
Comment: GPIOB_BSRR unused
GPIOB_CRH 40010C04

Symbol: GPIOB_CRH
   Definitions
      At line 40 in file FP1.s
   Uses
      At line 131 in file FP1.s
Comment: GPIOB_CRH used once
GPIOB_CRL 40010C00

Symbol: GPIOB_CRL
   Definitions
      At line 39 in file FP1.s
   Uses
      None
Comment: GPIOB_CRL unused
GPIOB_IDR 40010C08

Symbol: GPIOB_IDR
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 41 in file FP1.s
   Uses
      At line 192 in file FP1.s
      At line 247 in file FP1.s

GPIOB_LCKR 40010C18

Symbol: GPIOB_LCKR
   Definitions
      At line 45 in file FP1.s
   Uses
      None
Comment: GPIOB_LCKR unused
GPIOB_ODR 40010C0C

Symbol: GPIOB_ODR
   Definitions
      At line 42 in file FP1.s
   Uses
      None
Comment: GPIOB_ODR unused
GPIOC_BRR 40011014

Symbol: GPIOC_BRR
   Definitions
      At line 54 in file FP1.s
   Uses
      None
Comment: GPIOC_BRR unused
GPIOC_BSRR 40011010

Symbol: GPIOC_BSRR
   Definitions
      At line 53 in file FP1.s
   Uses
      None
Comment: GPIOC_BSRR unused
GPIOC_CRH 40011004

Symbol: GPIOC_CRH
   Definitions
      At line 50 in file FP1.s
   Uses
      None
Comment: GPIOC_CRH unused
GPIOC_CRL 40011000

Symbol: GPIOC_CRL
   Definitions
      At line 49 in file FP1.s
   Uses
      None
Comment: GPIOC_CRL unused
GPIOC_IDR 40011008

Symbol: GPIOC_IDR
   Definitions
      At line 51 in file FP1.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 198 in file FP1.s
      At line 252 in file FP1.s

GPIOC_LCKR 40011018

Symbol: GPIOC_LCKR
   Definitions
      At line 55 in file FP1.s
   Uses
      None
Comment: GPIOC_LCKR unused
GPIOC_ODR 4001100C

Symbol: GPIOC_ODR
   Definitions
      At line 52 in file FP1.s
   Uses
      None
Comment: GPIOC_ODR unused
INITIAL_MSP 20001000

Symbol: INITIAL_MSP
   Definitions
      At line 26 in file FP1.s
   Uses
      At line 84 in file FP1.s
Comment: INITIAL_MSP used once
PDTIME 000927C0

Symbol: PDTIME
   Definitions
      At line 76 in file FP1.s
   Uses
      None
Comment: PDTIME unused
PDTIME2 0007A120

Symbol: PDTIME2
   Definitions
      At line 77 in file FP1.s
   Uses
      At line 290 in file FP1.s
Comment: PDTIME2 used once
RCC_AHBENR 40021014

Symbol: RCC_AHBENR
   Definitions
      At line 64 in file FP1.s
   Uses
      None
Comment: RCC_AHBENR unused
RCC_APB1ENR 4002101C

Symbol: RCC_APB1ENR
   Definitions
      At line 68 in file FP1.s
   Uses
      None
Comment: RCC_APB1ENR unused



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

RCC_APB1RSTR 40021010

Symbol: RCC_APB1RSTR
   Definitions
      At line 63 in file FP1.s
   Uses
      None
Comment: RCC_APB1RSTR unused
RCC_APB2ENR 40021018

Symbol: RCC_APB2ENR
   Definitions
      At line 66 in file FP1.s
   Uses
      At line 116 in file FP1.s
Comment: RCC_APB2ENR used once
RCC_APB2RSTR 4002100C

Symbol: RCC_APB2RSTR
   Definitions
      At line 62 in file FP1.s
   Uses
      None
Comment: RCC_APB2RSTR unused
RCC_BDCR 40021020

Symbol: RCC_BDCR
   Definitions
      At line 69 in file FP1.s
   Uses
      None
Comment: RCC_BDCR unused
RCC_CFGR 40021004

Symbol: RCC_CFGR
   Definitions
      At line 60 in file FP1.s
   Uses
      None
Comment: RCC_CFGR unused
RCC_CFGR2 4002102C

Symbol: RCC_CFGR2
   Definitions
      At line 71 in file FP1.s
   Uses
      None
Comment: RCC_CFGR2 unused
RCC_CIR 40021008

Symbol: RCC_CIR
   Definitions
      At line 61 in file FP1.s
   Uses
      None
Comment: RCC_CIR unused
RCC_CR 40021000

Symbol: RCC_CR



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 59 in file FP1.s
   Uses
      None
Comment: RCC_CR unused
RCC_CSR 40021024

Symbol: RCC_CSR
   Definitions
      At line 70 in file FP1.s
   Uses
      None
Comment: RCC_CSR unused
REACT_TIME 00055730

Symbol: REACT_TIME
   Definitions
      At line 78 in file FP1.s
   Uses
      At line 166 in file FP1.s
Comment: REACT_TIME used once
38 symbols
410 symbols in table
