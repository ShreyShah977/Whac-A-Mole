


ARM Macro Assembler    Page 1 


    1 00000000         ; GPIO Test program - Dave Duguid, 2011
    2 00000000         ; Modified Trevor Douglas 2014
    3 00000000         
    4 00000000         
    5 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    6 00000000         ;;  Author: Shrey Shah
    7 00000000         ;;  SID: 200377176
    8 00000000         ;;  Date: November 27th 2020
    9 00000000         ;;  Class: ENSE 352 Fall 2020
   10 00000000         ;;
   11 00000000         ;;  This file contains all the code for the Whac-A-Mole 
                       arcade game. Each State is documented in detail with ref
                       erence to the PDF Handout.
   12 00000000         ;;  Please read the README.txt file before starting to g
                       et a high level overview
   13 00000000         ;;
   14 00000000         ;;  IMPORTANT NOTE: This code is for the older generatio
                       n of the board. The board variant is the STM32F100RB, an
                       d the project for uvision must be initalized with that i
                       n mind.
   15 00000000         ;;  
   16 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   17 00000000         
   18 00000000         
   19 00000000         ;;; Directives
   20 00000000                 PRESERVE8
   21 00000000                 THUMB
   22 00000000         
   23 00000000         
   24 00000000         ;;; Equates
   25 00000000         
   26 00000000 20001000 
                       INITIAL_MSP
                               EQU              0x20001000  ; Initial Main Stac
                                                            k Pointer Value
   27 00000000         
   28 00000000         
   29 00000000         ;PORT A GPIO - Base Addr: 0x40010800
   30 00000000 40010800 
                       GPIOA_CRL
                               EQU              0x40010800  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   31 00000000 40010804 
                       GPIOA_CRH
                               EQU              0x40010804  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   32 00000000 40010808 
                       GPIOA_IDR
                               EQU              0x40010808  ; (0x08) Port Input
                                                             Data Register
   33 00000000 4001080C 
                       GPIOA_ODR
                               EQU              0x4001080C  ; (0x0C) Port Outpu
                                                            t Data Register
   34 00000000 40010810 
                       GPIOA_BSRR
                               EQU              0x40010810  ; (0x10) Port Bit S



ARM Macro Assembler    Page 2 


                                                            et/Reset Register
   35 00000000 40010814 
                       GPIOA_BRR
                               EQU              0x40010814  ; (0x14) Port Bit R
                                                            eset Register
   36 00000000 40010818 
                       GPIOA_LCKR
                               EQU              0x40010818  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   37 00000000         
   38 00000000         ;PORT B GPIO - Base Addr: 0x40010C00
   39 00000000 40010C00 
                       GPIOB_CRL
                               EQU              0x40010C00  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   40 00000000 40010C04 
                       GPIOB_CRH
                               EQU              0x40010C04  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   41 00000000 40010C08 
                       GPIOB_IDR
                               EQU              0x40010C08  ; (0x08) Port Input
                                                             Data Register
   42 00000000 40010C0C 
                       GPIOB_ODR
                               EQU              0x40010C0C  ; (0x0C) Port Outpu
                                                            t Data Register
   43 00000000 40010C10 
                       GPIOB_BSRR
                               EQU              0x40010C10  ; (0x10) Port Bit S
                                                            et/Reset Register
   44 00000000 40010C14 
                       GPIOB_BRR
                               EQU              0x40010C14  ; (0x14) Port Bit R
                                                            eset Register
   45 00000000 40010C18 
                       GPIOB_LCKR
                               EQU              0x40010C18  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   46 00000000         
   47 00000000         ;The onboard LEDS are on port C bits 8 and 9
   48 00000000         ;PORT C GPIO - Base Addr: 0x40011000
   49 00000000 40011000 
                       GPIOC_CRL
                               EQU              0x40011000  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   50 00000000 40011004 
                       GPIOC_CRH
                               EQU              0x40011004  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   51 00000000 40011008 
                       GPIOC_IDR
                               EQU              0x40011008  ; (0x08) Port Input



ARM Macro Assembler    Page 3 


                                                             Data Register
   52 00000000 4001100C 
                       GPIOC_ODR
                               EQU              0x4001100C  ; (0x0C) Port Outpu
                                                            t Data Register
   53 00000000 40011010 
                       GPIOC_BSRR
                               EQU              0x40011010  ; (0x10) Port Bit S
                                                            et/Reset Register
   54 00000000 40011014 
                       GPIOC_BRR
                               EQU              0x40011014  ; (0x14) Port Bit R
                                                            eset Register
   55 00000000 40011018 
                       GPIOC_LCKR
                               EQU              0x40011018  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   56 00000000         
   57 00000000         ;Registers for configuring and enabling the clocks
   58 00000000         ;RCC Registers - Base Addr: 0x40021000
   59 00000000 40021000 
                       RCC_CR  EQU              0x40021000  ; Clock Control Reg
                                                            ister
   60 00000000 40021004 
                       RCC_CFGR
                               EQU              0x40021004  ; Clock Configurati
                                                            on Register
   61 00000000 40021008 
                       RCC_CIR EQU              0x40021008  ; Clock Interrupt R
                                                            egister
   62 00000000 4002100C 
                       RCC_APB2RSTR
                               EQU              0x4002100C  ; APB2 Peripheral R
                                                            eset Register
   63 00000000 40021010 
                       RCC_APB1RSTR
                               EQU              0x40021010  ; APB1 Peripheral R
                                                            eset Register
   64 00000000 40021014 
                       RCC_AHBENR
                               EQU              0x40021014  ; AHB Peripheral Cl
                                                            ock Enable Register
                                                            
   65 00000000         
   66 00000000 40021018 
                       RCC_APB2ENR
                               EQU              0x40021018  ; APB2 Peripheral C
                                                            lock Enable Registe
                                                            r  -- Used
   67 00000000         
   68 00000000 4002101C 
                       RCC_APB1ENR
                               EQU              0x4002101C  ; APB1 Peripheral C
                                                            lock Enable Registe
                                                            r
   69 00000000 40021020 
                       RCC_BDCR
                               EQU              0x40021020  ; Backup Domain Con



ARM Macro Assembler    Page 4 


                                                            trol Register
   70 00000000 40021024 
                       RCC_CSR EQU              0x40021024  ; Control/Status Re
                                                            gister
   71 00000000 4002102C 
                       RCC_CFGR2
                               EQU              0x4002102C  ; Clock Configurati
                                                            on Register 2
   72 00000000         
   73 00000000         ; Times for delay routines
   74 00000000         
   75 00000000         
   76 00000000 000927C0 
                       PDTIME  EQU              600000      ; TIMER
   77 00000000 0007A120 
                       PDTIME2 EQU              500000      ; TIMER
   78 00000000         
   79 00000000 00030D40 
                       DELAYTIME
                               EQU              200000      ;; TIMER
   80 00000000         
   81 00000000         ;;;;;///////////////////////////////////////////////////
                       //
   82 00000000         ;;;;; IF you want to modify the React Time, WinSignalTim
                       e, FailSignalTime and Number of Cycles.
   83 00000000         ;;;;; Modify the following block of code 
   84 00000000         
   85 00000000         
   86 00000000 00055730 
                       REACT_TIME
                               EQU              350000      ; GameWaitTime
   87 00000000         
   88 00000000 00000010 
                       NumberofCycles
                               EQU              16          ;; Value containing
                                                             the number of cycl
                                                            es.
   89 00000000         
   90 00000000 00030D40 
                       WinningSignalTime
                               EQU              200000      ;; Wining Signal Ti
                                                            me;
   91 00000000         
   92 00000000 00055730 
                       FailingSignalTime
                               EQU              350000      ; Fail Sequence Lig
                                                            ht Time
   93 00000000         
   94 00000000         ; Vector Table Mapped to Address 0 at Reset
   95 00000000                 AREA             RESET, Data, READONLY
   96 00000000                 EXPORT           __Vectors
   97 00000000         
   98 00000000 20001000 
                       __Vectors
                               DCD              INITIAL_MSP ; stack pointer val
                                                            ue when stack is em
                                                            pty
   99 00000004 00000000        DCD              Reset_Handler ; reset vector
  100 00000008         



ARM Macro Assembler    Page 5 


  101 00000008                 AREA             MYCODE, CODE, READONLY
  102 00000000                 EXPORT           Reset_Handler
  103 00000000                 ENTRY
  104 00000000         
  105 00000000         Reset_Handler
                               PROC
  106 00000000         
  107 00000000         ;;;;;;;;;;;;;;;;;;
  108 00000000         ;; UC1 is in this block.
  109 00000000         ;; Just turns on all the neccesary GPIO Clocks 
  110 00000000         ;;;;;;;;;;;;;;;;;;
  111 00000000 F7FF FFFE       BL               GPIO_ClockInit
  112 00000004 F7FF FFFE       BL               GPIO_init
  113 00000008 F7FF FFFE       BL               IDLE
  114 0000000C         
  115 0000000C         
  116 0000000C                 ENDP
  117 0000000C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  118 0000000C         ;; Subroutines
  119 0000000C         ;;
  120 0000000C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  121 0000000C         
  122 0000000C         
  123 0000000C         
  124 0000000C         ;;;;;;;;;;;;;;;;;;;;;;
  125 0000000C         ;; Turn on clocks
  126 0000000C         ;;
  127 0000000C         ;;
  128 0000000C         ;;;;;;;;;;;;;;;;;;;;;;
  129 0000000C         GPIO_ClockInit
                               PROC
  130 0000000C 4EA7            LDR              R6, =RCC_APB2ENR
  131 0000000E 6830            LDR              R0, [R6]    ;
  132 00000010 F040 003C       ORR              R0, #0x3C
  133 00000014 6030            STR              R0, [R6]
  134 00000016 F04F 0C01       LDR              R12, = 0x1  ;
  135 0000001A         
  136 0000001A         
  137 0000001A 4770            BX               LR
  138 0000001C                 ALIGN
  139 0000001C                 ENDP
  140 0000001C         GPIO_init
                               PROC
  141 0000001C F04F 3244       LDR              R2,= 0x44444444
  142 00000020 4FA3            LDR              R7,=GPIOA_CRH
  143 00000022 6839            LDR              R1, [R7]    ;
  144 00000024 603A            STR              R2, [R7]
  145 00000026 4FA3            LDR              R7,= GPIOB_CRH ;
  146 00000028 6839            LDR              R1, [R7]    ;
  147 0000002A         
  148 0000002A         
  149 0000002A 4770            BX               LR
  150 0000002C                 ALIGN
  151 0000002C                 ENDP
  152 0000002C         
  153 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;
  154 0000002C         ;;; Idle State - UC1 and UC2;
  155 0000002C         ;;; 
  156 0000002C         ;;;



ARM Macro Assembler    Page 6 


  157 0000002C         ;;;
  158 0000002C         ; ENEL 384 Pushbuttons: SW2(Red): PB8, SW3(Black): PB9, 
                       SW4(Blue): PC12 *****NEW for 2015**** SW5(Green): PA5
  159 0000002C         ; ENEL 384 board LEDs: D1 - PA9, D2 - PA10, D3 - PA11, D
                       4 - PA12
  160 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;
  161 0000002C         
  162 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  163 0000002C         ;; This IDLE State will constantly flash 
  164 0000002C         ;; a pattern of lights from 
  165 0000002C         ;; left to right in sequence 
  166 0000002C         ;; until a button is pushed
  167 0000002C         ;; 
  168 0000002C         ;; UC2 ---- UC2 ---- UC2
  169 0000002C         ;; Waiting for Player Loop
  170 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  171 0000002C         
  172 0000002C         
  173 0000002C         IDLE    PROC
  174 0000002C         ;;;;;;;;;;;;;;;;;;;;;
  175 0000002C         ;;; This little tidbit actually stores the value of the 
                       REACT_TIME into a memory location.
  176 0000002C         ;;; Where we can modify and reuse it continously.
  177 0000002C         ;;; This is modified when a user has pressed the correct
                        button, the timer will be loaded, decremented and store
                       d back for future use.
  178 0000002C         ;;;;;;;;;;;;;;;;;;;;;
  179 0000002C F8DF 8288       LDR              R8,= 0x20001000 ;
  180 00000030 48A2            LDR              R0,= REACT_TIME ;
  181 00000032 F8C8 0000       STR              R0, [R8]    ;
  182 00000036 B500            PUSH             {LR}
  183 00000038 F04F 0000       LDR              R0,= 0x0    ;
  184 0000003C F04F 0800       LDR              R8,= 0x0    ;
  185 00000040         
  186 00000040 F04F 0130       LDR              R1,= 0x30   ;
  187 00000044         GameWaitPattern
  188 00000044         
  189 00000044 489A            LDR              R0,= GPIOA_CRH ;
  190 00000046 6001            STR              R1, [R0]    ;
  191 00000048 F8DF 8274       LDR              R8,= DELAYTIME
  192 0000004C F7FF FFFE       BL               R8SecondsDelay
  193 00000050         
  194 00000050         
  195 00000050         
  196 00000050 F7FF FFFE       BL               CheckforUser
  197 00000054 F5B1 3F40       CMP              R1, #0x30000 ; ;; Since we turn
                                                             on the light in se
                                                            quence, we must res
                                                            et back to the firs
                                                            t light at the end.
                                                            
  198 00000058 BF08 2103       MOVEQ            R1, #0x3    ;  ;; This does exa
                                                            ctly that by taking
                                                             in the location of
                                                             which light we're 
                                                            at. then resets it.
                                                            
  199 0000005C EA4F 1101       LSL              R1, R1, #0x4 ;;
  200 00000060         



ARM Macro Assembler    Page 7 


  201 00000060 F85D EB04       POP              {LR}        ;
  202 00000064 E7EE            B                GameWaitPattern
  203 00000066 00 00           ALIGN
  204 00000068                 ENDP
  205 00000068         CheckforUser
                               PROC
  206 00000068 4A96            LDR              R2,= GPIOB_IDR ; Loading in the
                                                             input for the Push
                                                            Buttons assigned at
                                                             Port B;
  207 0000006A 6812            LDR              R2, [R2]    ; 
  208 0000006C EA4F 2212       LSR              R2, R2, #8  ; ;; We isolate the
                                                             bits corresponding
                                                             to a button press 
                                                            from either Red or 
                                                            Black.
  209 00000070 2ADF            CMP              R2, #0xDF   ;
  210 00000072 DBFE            BLT              GameStart
  211 00000074 F04F 0200       LDR              R2,= 0x0    ;
  212 00000078 4A93            LDR              R2,= GPIOC_IDR ; ;; Check Blue 
                                                            Button at PC12
  213 0000007A 6812            LDR              R2, [R2]    ;
  214 0000007C EA4F 3212       LSR              R2, R2, #12 ;
  215 00000080 2A0E            CMP              R2, #0xE    ;
  216 00000082 D0FE            BEQ              GameStart
  217 00000084 F04F 0200       LDR              R2,= 0x0    ;
  218 00000088 4A90            LDR              R2,= GPIOA_IDR ;; Check Green B
                                                            utton at PA5
  219 0000008A 6812            LDR              R2, [R2]    ;
  220 0000008C EA4F 1252       LSR              R2, R2, #5  ;
  221 00000090 F002 0201       AND              R2, R2, #0x1 ;
  222 00000094 B352            CBZ              R2, GameStart ;
  223 00000096         
  224 00000096         
  225 00000096 4770            BX               LR          ;
  226 00000098                 ALIGN                        ;
  227 00000098                 ENDP                         ;
  228 00000098         
  229 00000098         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  230 00000098         ;; Here is our generic timer or delay function
  231 00000098         ;; It takes in the value passed into R8 and returns when
                        
  232 00000098         ;; The variable is 0.
  233 00000098         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  234 00000098         
  235 00000098         
  236 00000098         R8SecondsDelay
                               PROC
  237 00000098 F1A8 0801       SUB              R8,R8,#0x1  ;
  238 0000009C F1B8 0F00       CMP              R8, #0      ;
  239 000000A0 DD00            BLE              endDelay
  240 000000A2 DCFE            BGT              R8SecondsDelay
  241 000000A4                 ALIGN
  242 000000A4                 ENDP
  243 000000A4         endDelay
  244 000000A4 4770            BX               LR          ;
  245 000000A6         
  246 000000A6         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  247 000000A6         ;; This is a generic CheckButtons Function



ARM Macro Assembler    Page 8 


  248 000000A6         ;; It checks for any input in all four buttons
  249 000000A6         ;; i.e ENEL 384 Pushbuttons: SW2(Red): PB8, SW3(Black): 
                       PB9, SW4(Blue): PC12 SW5(Green): PA5
  250 000000A6         ;; And then shifts, ORR's and operates so that it forms 
                       a binary number.
  251 000000A6         ;; For example, if the left most button is pressed (Red 
                       - PB8)
  252 000000A6         ;; Then the resulting binary number generated is 0001.
  253 000000A6         ;; For the Blue - PC12, the Resulting binary number is 0
                       100;
  254 000000A6         ;; This is what's used to determine the pass/fail logic.
                       
  255 000000A6         ;;;;;;;;;;;;;;;;;;;;;;;;;;
  256 000000A6         
  257 000000A6         
  258 000000A6         
  259 000000A6         CheckButtons
                               PROC
  260 000000A6 F04F 0500       LDR              R5,= 0x0    ;
  261 000000AA F8DF 8218       LDR              R8,= GPIOB_IDR
  262 000000AE F8D8 5000       LDR              R5, [R8]    ;
  263 000000B2 EA4F 2515       LSR              R5, R5, #8  ;
  264 000000B6 F005 050F       AND              R5, R5, #0xF ;
  265 000000BA F085 050F       EOR              R5, R5, #0xF ;
  266 000000BE F8DF 8208       LDR              R8,= GPIOC_IDR
  267 000000C2 F8D8 4000       LDR              R4, [R8]    ;
  268 000000C6 EA4F 3414       LSR              R4, R4, #12 ;
  269 000000CA 2C0E            CMP              R4, #0xE    ;
  270 000000CC BF08 F045 
              0504             ORREQ            R5, #0x4    ;
  271 000000D2 F8DF 81F8       LDR              R8,= GPIOA_IDR ;
  272 000000D6 F8D8 4000       LDR              R4, [R8]    ;
  273 000000DA EA4F 1454       LSR              R4, R4, #5  ;
  274 000000DE F004 0401       AND              R4, R4, #1  ;
  275 000000E2 2C00            CMP              R4, #0x0    ; 
  276 000000E4 BF08 F045 
              0508             ORREQ            R5, R5, #0x8 ; 
  277 000000EA 4770            BX               LR
  278 000000EC                 ALIGN
  279 000000EC                 ENDP
  280 000000EC         
  281 000000EC         
  282 000000EC         
  283 000000EC         
  284 000000EC         
  285 000000EC         
  286 000000EC         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;
  287 000000EC         ;; UC3 ---- UC3 ---- UC3
  288 000000EC         ;; GameStart is the actual game function, this is initia
                       ted once the user has moved on from IDLE or wait state.
  289 000000EC         ;;
  290 000000EC         ;; It contains a PreLimWaitFunction on line 280. Loaded 
                       with the PDTIME2, a different timer value used for Preli
                       mWait
  291 000000EC         ;;
  292 000000EC         ;; Since we have an easy to use abstract timer function,
                        we just use that.
  293 000000EC         ;;



ARM Macro Assembler    Page 9 


  294 000000EC         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;
  295 000000EC         GameStart
                               PROC
  296 000000EC B500            PUSH             {LR}        ; ;; We push the LR
                                                             here so that we ca
                                                            n make calls to oth
                                                            er functions within
                                                             this one.
  297 000000EE F04F 0200       LDR              R2, = 0x0   ;
  298 000000F2         
  299 000000F2         continuePlay
  300 000000F2 4977            LDR              R1,= 0x4444444 ;
  301 000000F4         
  302 000000F4 4F6E            LDR              R7, =GPIOA_CRH ; 
  303 000000F6 6039            STR              R1, [R7]    ;
  304 000000F8 F8DF 81D8       LDR              R8, = PDTIME2 ;
  305 000000FC F7FF FFFE       BL               R8SecondsDelay ;
  306 00000100         
  307 00000100         ;;;;;;
  308 00000100         ;; The above sequence is used to indicate to the user th
                       at the game has started. 
  309 00000100         ;; That is, turning off all lights for a brief stint
  310 00000100         ;;;;;;
  311 00000100         
  312 00000100 F04F 0A00       LDR              R10, = 0x0  ;
  313 00000104         ;; Here we dive into the main game loop.
  314 00000104         loopmain                             ;
  315 00000104         
  316 00000104         ;; Our Random number generator is called here. Jump to L
                       ine 314
  317 00000104 F7FF FFFE       BL               Rand        ;
  318 00000108         
  319 00000108         ;; Since we know that the Random number is stored in R4,
                        we simply compare it to the possible values that it can
                        be.
  320 00000108         ;; We turn on the corresponding LED based on the random 
                       number.
  321 00000108 2C00            CMP              R4, #0x0    ;
  322 0000010A D0FE            BEQ              LED1        ;
  323 0000010C F1B4 4F00       CMP              R4, #0x80000000 ;
  324 00000110 D0FE            BEQ              LED2        ;
  325 00000112 F1B4 4F40       CMP              R4, #0xC0000000 ;
  326 00000116 D0FE            BEQ              LED3        ;
  327 00000118 F1B4 4F80       CMP              R4, #0x40000000 ;
  328 0000011C D0FE            BEQ              LED4        ; 
  329 0000011E         
  330 0000011E F04F 0A00       LDR              R10, = 0x0  ;
  331 00000122 D1EF            BNE              loopmain
  332 00000124         
  333 00000124         
  334 00000124         FinishedWinAnim
  335 00000124 F85D EB04       POP              {LR}
  336 00000128 E7FE            B                IDLE        ;
  337 0000012A 00 00           ALIGN
  338 0000012C                 ENDP
  339 0000012C         
  340 0000012C         Rand    PROC
  341 0000012C         ;; Rand Generator



ARM Macro Assembler    Page 10 


  342 0000012C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  343 0000012C         ;; Our random number generator is a very simple concept.
                       
  344 0000012C         ;; Take two large prime numbers. Add some relatively sma
                       ll number to one and multiply the same small number to t
                       he other
  345 0000012C         ;; Then And them with some number. This will produce bit
                       s in the very left most row.
  346 0000012C         ;; The combinations are generally some sequence of 0, 4,
                        8 or C in the left most hex digit.
  347 0000012C         ;; The sequence of these combinations are random since t
                       he small number is dependant on the current game level. 
                       
  348 0000012C         ;; Further adding randomization to the process
  349 0000012C         ;;
  350 0000012C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  351 0000012C 496A            LDR              R1,= 5000077 ;
  352 0000012E F8DF A1A8       LDR              R10, = 5000077 ;
  353 00000132 FB0C FC01       MUL              R12,R1      ;
  354 00000136 44D4            ADD              R12, R10    ;
  355 00000138 F00C 4440       AND              R4, R12, #0xC0000000 ;
  356 0000013C         
  357 0000013C 4770            BX               LR
  358 0000013E 00 00           ALIGN
  359 00000140                 ENDP
  360 00000140         
  361 00000140         
  362 00000140         
  363 00000140         
  364 00000140         
  365 00000140         
  366 00000140         
  367 00000140         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  368 00000140         ;;;   UC4 ---- UC4 ---- UC4
  369 00000140         ;;; Here is out Win State, i.e when the user has sucessf
                       ully got the correct button pressed 16 times in sequence
                       .
  370 00000140         ;;; It displays a short animation of the lights back and
                        forth a couple of times.
  371 00000140         ;;; Then exits to IDLE state, awaiting the next user.
  372 00000140         ;;;
  373 00000140         ;;; It displays this animation of lights for a certain p
                       eriod of time, around 10s.
  374 00000140         ;;;
  375 00000140         ;;;
  376 00000140         ;;;
  377 00000140         ;;; The user's proficiency is displayed just by reaching
                        to this state. Since there are only 16 total levels, 
  378 00000140         ;;; upon passing the 16th leads to this function
  379 00000140         ;;; 
  380 00000140         ;;;
  381 00000140         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  382 00000140         
  383 00000140         WinState
                               PROC
  384 00000140 F04F 0332       LDR              R3,= 0x32   ;
  385 00000144 4F5A            LDR              R7,= GPIOA_CRH ;
  386 00000146         WinCycleLoop
  387 00000146 F243 0130       LDR              R1,= 0x3030 ;



ARM Macro Assembler    Page 11 


  388 0000014A 6039            STR              R1, [R7]    ;
  389 0000014C F8DF 8170       LDR              R8,= WinningSignalTime
  390 00000150 F7FF FFFE       BL               R8SecondsDelay ;
  391 00000154 F1A3 0301       SUB              R3, R3, #1  ;
  392 00000158 EA4F 1101       LSL              R1, R1, #4  ;
  393 0000015C 6039            STR              R1, [R7]    ;
  394 0000015E F8DF 8160       LDR              R8,= WinningSignalTime
  395 00000162 F7FF FFFE       BL               R8SecondsDelay ;
  396 00000166 F1A3 0301       SUB              R3, R3, #1  ;
  397 0000016A B103            CBZ              R3, resetBackToIDLE
  398 0000016C E7EB            B                WinCycleLoop
  399 0000016E         resetBackToIDLE
  400 0000016E E7FE            B                IDLE
  401 00000170                 ENDP
  402 00000170                 ALIGN
  403 00000170         
  404 00000170         
  405 00000170         
  406 00000170         
  407 00000170         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  408 00000170         ;; LEDX contains the code to turn on an LED, where X is 
                       (#1-#4).
  409 00000170         ;;
  410 00000170         ;; Then it also loads a value from the memory address of
                        the timer.
  411 00000170         ;; Which is decremented each cycle of the TimerLoopX whe
                       re X is the LED number
  412 00000170         ;; 
  413 00000170         ;; We call CheckButtons each time on this cycle to ensur
                       e that we always record if a button has been pressed.
  414 00000170         ;;
  415 00000170         ;; If the incorrect button has been pressed we will know
                        instantly since the binary number outputed from CheckBu
                       ttons 
  416 00000170         ;; will be different than the one we expect
  417 00000170         ;;
  418 00000170         ;; As such there are two ways to reach FailState from he
                       re, that is:
  419 00000170         ;; 1. Exit to Fail state when the incorrect button has b
                       een pressed.
  420 00000170         ;; 2. Exit to fail state when the timer has been expired
                       
  421 00000170         ;; These are both two different events.
  422 00000170         ;;
  423 00000170         ;;
  424 00000170         ;; Lastly, if the correct button has been pressed we wil
                       l proceed to the TurnOffState
  425 00000170         ;; Where the corresponding light turns off. And the leve
                       l is incremented by one.
  426 00000170         ;;
  427 00000170         ;;
  428 00000170         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  429 00000170         
  430 00000170         
  431 00000170         
  432 00000170         
  433 00000170         LED1    PROC
  434 00000170 F04F 0330       LDR              R3, = 0x30  ;
  435 00000174 603B            STR              R3, [R7]    ;



ARM Macro Assembler    Page 12 


  436 00000176 F04F 0300       LDR              R3, = 0x0   ;
  437 0000017A 4E4F            LDR              R6, = 0x20001000 ;
  438 0000017C 6836            LDR              R6, [R6]    ;
  439 0000017E         TimerLoop1
  440 0000017E B500            PUSH             {LR}
  441 00000180 F7FF FFFE       BL               CheckButtons
  442 00000184 F85D EB04       POP              {LR}
  443 00000188 2D01            CMP              R5, #0x1    ;
  444 0000018A D0FE            BEQ              TurnOff1    ;
  445 0000018C DCFE            BGT              FailState
  446 0000018E F1A6 0602       SUB              R6, R6, #2  ;
  447 00000192 B3DE            CBZ              R6, FailState
  448 00000194 E7F3            B                TimerLoop1
  449 00000196 00 00           ALIGN
  450 00000198                 ENDP
  451 00000198         
  452 00000198         
  453 00000198         
  454 00000198         LED2    PROC
  455 00000198 F44F 7340       LDR              R3, = 0x300 ;
  456 0000019C 603B            STR              R3, [R7]    ;
  457 0000019E 4E46            LDR              R6, = 0x20001000 ;
  458 000001A0 6836            LDR              R6, [R6]    ;
  459 000001A2         TimerLoop2
  460 000001A2 B500            PUSH             {LR}
  461 000001A4 F7FF FFFE       BL               CheckButtons
  462 000001A8 F85D EB04       POP              {LR}
  463 000001AC 2D02            CMP              R5, #0x2    ;                  
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                             
  464 000001AE D0FE            BEQ              TurnOff1    ;
  465 000001B0 2D01            CMP              R5, #0x1    ;
  466 000001B2 DAFE            BGE              FailState
  467 000001B4 F1A6 0602       SUB              R6, R6, #2  ;
  468 000001B8 B346            CBZ              R6, FailState
  469 000001BA E7F2            B                TimerLoop2
  470 000001BC                 ALIGN
  471 000001BC                 ENDP
  472 000001BC         
  473 000001BC         ;;;;
  474 000001BC         ;; Assembly code doesn't like being spaced apart, this a
                       cts as a springboard to let us get back to our original 
                       state.
  475 000001BC         ;; (used in the Turn Off Function)
  476 000001BC         ;;;;
  477 000001BC         JumpWin PROC
  478 000001BC E7FE            B                WinState
  479 000001BE 00 00           ALIGN
  480 000001C0                 ENDP
  481 000001C0         
  482 000001C0         
  483 000001C0         LED3    PROC



ARM Macro Assembler    Page 13 


  484 000001C0 F44F 5340       LDR              R3, = 0x3000 ;
  485 000001C4 603B            STR              R3, [R7]    ;
  486 000001C6 4E3C            LDR              R6, = 0x20001000 ;
  487 000001C8 6836            LDR              R6, [R6]    ;
  488 000001CA         TimerLoop3
  489 000001CA B500            PUSH             {LR}
  490 000001CC F7FF FFFE       BL               CheckButtons
  491 000001D0 F85D EB04       POP              {LR}
  492 000001D4 2D04            CMP              R5, #0x4    ;      
  493 000001D6 D0FE            BEQ              TurnOff1    ;
  494 000001D8 2D01            CMP              R5, #0x1    ;
  495 000001DA DAFE            BGE              FailState
  496 000001DC F1A6 0602       SUB              R6, R6, #2  ;
  497 000001E0 B1A6            CBZ              R6, FailState
  498 000001E2 E7F2            B                TimerLoop3
  499 000001E4                 ALIGN
  500 000001E4                 ENDP
  501 000001E4         
  502 000001E4         
  503 000001E4                 ALIGN
  504 000001E4         LED4    PROC
  505 000001E4 F44F 3340       LDR              R3, = 0x30000 ;
  506 000001E8 603B            STR              R3, [R7]    ;
  507 000001EA 4E33            LDR              R6, = 0x20001000 ;
  508 000001EC 6836            LDR              R6, [R6]    ;
  509 000001EE         TimerLoop4
  510 000001EE B500            PUSH             {LR}
  511 000001F0 F7FF FFFE       BL               CheckButtons
  512 000001F4 F85D EB04       POP              {LR}
  513 000001F8 2D08            CMP              R5, #0x8    ;
  514 000001FA D0FE            BEQ              TurnOff1    ;
  515 000001FC 2D01            CMP              R5, #0x1    ;
  516 000001FE DAFE            BGE              FailState   ;
  517 00000200 B333            CBZ              R3, TurnOff1 ;
  518 00000202 F1A6 0602       SUB              R6, R6, #2  ;
  519 00000206 B10E            CBZ              R6, FailState
  520 00000208 E7F1            B                TimerLoop4
  521 0000020A 00 00           ALIGN
  522 0000020C                 ENDP
  523 0000020C         
  524 0000020C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  525 0000020C         ;;  UC5 ---- UC5 ---- UC5
  526 0000020C         ;; Here is our fail state. Where the user has either exp
                       ired the timer or pressed the wrong button in the curren
                       t level.
  527 0000020C         ;; It displays all lights briefly to let the user know t
                       he game has ended.
  528 0000020C         ;; Then it flashes the lights to show the binary number 
                       of the highest level completed.
  529 0000020C         ;; Lastly exiting to the IDLE loop (UC2) awaiting the ne
                       xt user. 
  530 0000020C         ;;
  531 0000020C         ;;
  532 0000020C         ;; All numbers from 1 - 15 are represented. 
  533 0000020C         ;; So that if the user fails on the very last level, the
                       n all lights will flash to indicate 15 in binary
  534 0000020C         ;;  
  535 0000020C         ;; If the user fails on the very first level (techincall
                       y level 0), then no lights flash and it goes straight to



ARM Macro Assembler    Page 14 


                        the IDLE loop (UC2);
  536 0000020C         ;;
  537 0000020C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  538 0000020C         
  539 0000020C         FailState
                               PROC
  540 0000020C 4F28            LDR              R7,= GPIOA_CRH ;
  541 0000020E F04F 0005       LDR              R0,= 0x5    ;
  542 00000212 4932            LDR              R1,= 0x33330 ;
  543 00000214 6039            STR              R1, [R7]    ;
  544 00000216 F8DF 80A8       LDR              R8,= DELAYTIME
  545 0000021A F7FF FFFE       BL               R8SecondsDelay ;
  546 0000021E B18A            CBZ              R2, leave   ;
  547 00000220 F7FF FFFE       BL               GetBitCount
  548 00000224         
  549 00000224         Failloop
  550 00000224 6039            STR              R1, [R7]    ;
  551 00000226 F8DF 8094       LDR              R8,= FailingSignalTime
  552 0000022A F7FF FFFE       BL               R8SecondsDelay ;
  553 0000022E F04F 0200       LDR              R2,= 0x0    ;
  554 00000232 603A            STR              R2, [R7]    ;
  555 00000234 F8DF 8084       LDR              R8,= FailingSignalTime ;
  556 00000238 F7FF FFFE       BL               R8SecondsDelay
  557 0000023C F1A0 0001       SUB              R0, R0, #1  ;
  558 00000240 B100            CBZ              R0, leave
  559 00000242 E7EF            B                Failloop
  560 00000244         leave
  561 00000244 BC7E            POP              {R1,R2,R3,R4,R5,R6}
  562 00000246 F8DF 8078       LDR              R8,= DELAYTIME ;
  563 0000024A F7FF FFFE       BL               R8SecondsDelay
  564 0000024E E7FE            B                IDLE
  565 00000250                 ALIGN
  566 00000250                 ENDP
  567 00000250         
  568 00000250         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  569 00000250         ;; Here is the Turn Off State.
  570 00000250         ;; We arrive here everytime the correct button correspon
                       ding to the light has been pressed.
  571 00000250         ;;
  572 00000250         ;; There are several things happening here. 
  573 00000250         ;; Most notably, we turn off the light.
  574 00000250         ;; Then, we load in the old timer value for REACT_TIME
  575 00000250         ;; And decrement it by the value of the level and a smal
                       l number 0x400.
  576 00000250         ;; This way, each subsequent level is "harder" since the
                        user has less time to react to.
  577 00000250         ;; 
  578 00000250         ;; Because we always store the value of time in memory w
                       e just plug it back into 0x20001000
  579 00000250         ;;
  580 00000250         ;; If and only if the value of R2 is 16. (We have achiev
                       ed 16 button presses) then we "Win" the game and proceed
                        to the WinState
  581 00000250         ;;
  582 00000250         ;; Otherwise, we just proceed to the game loop and conti
                       nue to the next level.
  583 00000250         ;;
  584 00000250         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  585 00000250         



ARM Macro Assembler    Page 15 


  586 00000250         TurnOff1
                               PROC
  587 00000250 F04F 0100       LDR              R1, =  0x0  ;
  588 00000254 6039            STR              R1, [R7]    ;
  589 00000256 F44F 6A80       LDR              R10,= 0x400
  590 0000025A         
  591 0000025A 4E17            LDR              R6, = 0x20001000 ;
  592 0000025C 6831            LDR              R1, [R6]    ;
  593 0000025E F102 0201       ADD              R2, R2, #1  ;
  594 00000262 FB0A FA02       MUL              R10, R10, R2 ;
  595 00000266 46D4            MOV              R12, R10    ;
  596 00000268 EBA1 010A       SUB              R1, R1, R10 ;
  597 0000026C 6031            STR              R1, [R6]    ;
  598 0000026E F04F 0110       LDR              R1,= NumberofCycles
  599 00000272 428A            CMP              R2, R1      ;
  600 00000274 D0FE            BEQ              JumpWin
  601 00000276 E73C            B                continuePlay ;
  602 00000278                 ALIGN
  603 00000278                 ENDP
  604 00000278         GetBitCount
                               PROC
  605 00000278         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  606 00000278         ;; Obtain the level number and represent 
  607 00000278         ;; it as a sequence of lights in binary
  608 00000278         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  609 00000278         ;; Here we modify the level number so that it correspond
                       s to a binary number within our LED's.
  610 00000278         ;; i.e Lets say we reach level 5, 5 in binary is 0101. A
                       nd so we turn on the 2nd and 4th LEDS from the left.
  611 00000278         ;; It's interesting to note that we have to keep in mind
                        that although the LED's go left to right, each one is t
                       urned on by an increasing value of 0x30.
  612 00000278         ;; We've made our loop so that this happens efficently. 
                       It returns the correct hex number to turn on the lights 
                       in R1.
  613 00000278 F04F 0400       LDR              R4,= 0x0    ;
  614 0000027C F04F 0508       LDR              R5,= 0x8    ;
  615 00000280 F04F 0830       LDR              R8,= 0x30   ;
  616 00000284         GetDigits
  617 00000284 B155            CBZ              R5, Done    ;
  618 00000286         
  619 00000286 EA02 0105       AND              R1, R2, R5  ;
  620 0000028A 42A9            CMP              R1, R5      ;
  621 0000028C BF08 EA44 
              0408             ORREQ            R4, R8      ;
  622 00000292 EA4F 1808       LSL              R8, R8, #4  ;
  623 00000296 EA4F 0555       LSR              R5, R5, #1  ;
  624 0000029A E7F3            B                GetDigits
  625 0000029C         Done
  626 0000029C F04F 0100       LDR              R1,= 0      ;
  627 000002A0 4621            MOV              R1, R4      ;
  628 000002A2 F04F 0400       LDR              R4,= 0      ;
  629 000002A6 F04F 0800       LDR              R8,= 0      ;
  630 000002AA         
  631 000002AA 4770            BX               LR
  632 000002AC                 ALIGN
  633 000002AC                 ENDP
  634 000002AC         
  635 000002AC         Finish



ARM Macro Assembler    Page 16 


  636 000002AC         
  637 000002AC                 END
              40021018 
              40010804 
              40010C04 
              20001000 
              00055730 
              00030D40 
              40010C08 
              40011008 
              40010808 
              04444444 
              0007A120 
              004C4B8D 
              00033330 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\fp1.d -o.\objects\fp1.o -IC:\Users\shrey\Documents\Cours
es\ENSE352\Whac-A-Mole\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Devic
e\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefin
e="__UVISION_VERSION SETA 521" --predefine="STM32F10X_MD_VL SETA 1" --list=.\li
stings\fp1.lst FP1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 95 in file FP1.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 98 in file FP1.s
   Uses
      At line 96 in file FP1.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CheckButtons 000000A6

Symbol: CheckButtons
   Definitions
      At line 259 in file FP1.s
   Uses
      At line 441 in file FP1.s
      At line 461 in file FP1.s
      At line 490 in file FP1.s
      At line 511 in file FP1.s

CheckforUser 00000068

Symbol: CheckforUser
   Definitions
      At line 205 in file FP1.s
   Uses
      At line 196 in file FP1.s
Comment: CheckforUser used once
Done 0000029C

Symbol: Done
   Definitions
      At line 625 in file FP1.s
   Uses
      At line 617 in file FP1.s
Comment: Done used once
FailState 0000020C

Symbol: FailState
   Definitions
      At line 539 in file FP1.s
   Uses
      At line 445 in file FP1.s
      At line 447 in file FP1.s
      At line 466 in file FP1.s
      At line 468 in file FP1.s
      At line 495 in file FP1.s
      At line 497 in file FP1.s
      At line 516 in file FP1.s
      At line 519 in file FP1.s

Failloop 00000224

Symbol: Failloop
   Definitions
      At line 549 in file FP1.s
   Uses
      At line 559 in file FP1.s
Comment: Failloop used once
Finish 000002AC

Symbol: Finish
   Definitions
      At line 635 in file FP1.s
   Uses
      None
Comment: Finish unused
FinishedWinAnim 00000124



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: FinishedWinAnim
   Definitions
      At line 334 in file FP1.s
   Uses
      None
Comment: FinishedWinAnim unused
GPIO_ClockInit 0000000C

Symbol: GPIO_ClockInit
   Definitions
      At line 129 in file FP1.s
   Uses
      At line 111 in file FP1.s
Comment: GPIO_ClockInit used once
GPIO_init 0000001C

Symbol: GPIO_init
   Definitions
      At line 140 in file FP1.s
   Uses
      At line 112 in file FP1.s
Comment: GPIO_init used once
GameStart 000000EC

Symbol: GameStart
   Definitions
      At line 295 in file FP1.s
   Uses
      At line 210 in file FP1.s
      At line 216 in file FP1.s
      At line 222 in file FP1.s

GameWaitPattern 00000044

Symbol: GameWaitPattern
   Definitions
      At line 187 in file FP1.s
   Uses
      At line 202 in file FP1.s
Comment: GameWaitPattern used once
GetBitCount 00000278

Symbol: GetBitCount
   Definitions
      At line 604 in file FP1.s
   Uses
      At line 547 in file FP1.s
Comment: GetBitCount used once
GetDigits 00000284

Symbol: GetDigits
   Definitions
      At line 616 in file FP1.s
   Uses
      At line 624 in file FP1.s
Comment: GetDigits used once
IDLE 0000002C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: IDLE
   Definitions
      At line 173 in file FP1.s
   Uses
      At line 113 in file FP1.s
      At line 336 in file FP1.s
      At line 400 in file FP1.s
      At line 564 in file FP1.s

JumpWin 000001BC

Symbol: JumpWin
   Definitions
      At line 477 in file FP1.s
   Uses
      At line 600 in file FP1.s
Comment: JumpWin used once
LED1 00000170

Symbol: LED1
   Definitions
      At line 433 in file FP1.s
   Uses
      At line 322 in file FP1.s
Comment: LED1 used once
LED2 00000198

Symbol: LED2
   Definitions
      At line 454 in file FP1.s
   Uses
      At line 324 in file FP1.s
Comment: LED2 used once
LED3 000001C0

Symbol: LED3
   Definitions
      At line 483 in file FP1.s
   Uses
      At line 326 in file FP1.s
Comment: LED3 used once
LED4 000001E4

Symbol: LED4
   Definitions
      At line 504 in file FP1.s
   Uses
      At line 328 in file FP1.s
Comment: LED4 used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 101 in file FP1.s
   Uses
      None
Comment: MYCODE unused
R8SecondsDelay 00000098




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: R8SecondsDelay
   Definitions
      At line 236 in file FP1.s
   Uses
      At line 192 in file FP1.s
      At line 240 in file FP1.s
      At line 305 in file FP1.s
      At line 390 in file FP1.s
      At line 395 in file FP1.s
      At line 545 in file FP1.s
      At line 552 in file FP1.s
      At line 556 in file FP1.s
      At line 563 in file FP1.s

Rand 0000012C

Symbol: Rand
   Definitions
      At line 340 in file FP1.s
   Uses
      At line 317 in file FP1.s
Comment: Rand used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 105 in file FP1.s
   Uses
      At line 99 in file FP1.s
      At line 102 in file FP1.s

TimerLoop1 0000017E

Symbol: TimerLoop1
   Definitions
      At line 439 in file FP1.s
   Uses
      At line 448 in file FP1.s
Comment: TimerLoop1 used once
TimerLoop2 000001A2

Symbol: TimerLoop2
   Definitions
      At line 459 in file FP1.s
   Uses
      At line 469 in file FP1.s
Comment: TimerLoop2 used once
TimerLoop3 000001CA

Symbol: TimerLoop3
   Definitions
      At line 488 in file FP1.s
   Uses
      At line 498 in file FP1.s
Comment: TimerLoop3 used once
TimerLoop4 000001EE

Symbol: TimerLoop4
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 509 in file FP1.s
   Uses
      At line 520 in file FP1.s
Comment: TimerLoop4 used once
TurnOff1 00000250

Symbol: TurnOff1
   Definitions
      At line 586 in file FP1.s
   Uses
      At line 444 in file FP1.s
      At line 464 in file FP1.s
      At line 493 in file FP1.s
      At line 514 in file FP1.s
      At line 517 in file FP1.s

WinCycleLoop 00000146

Symbol: WinCycleLoop
   Definitions
      At line 386 in file FP1.s
   Uses
      At line 398 in file FP1.s
Comment: WinCycleLoop used once
WinState 00000140

Symbol: WinState
   Definitions
      At line 383 in file FP1.s
   Uses
      At line 478 in file FP1.s
Comment: WinState used once
continuePlay 000000F2

Symbol: continuePlay
   Definitions
      At line 299 in file FP1.s
   Uses
      At line 601 in file FP1.s
Comment: continuePlay used once
endDelay 000000A4

Symbol: endDelay
   Definitions
      At line 243 in file FP1.s
   Uses
      At line 239 in file FP1.s
Comment: endDelay used once
leave 00000244

Symbol: leave
   Definitions
      At line 560 in file FP1.s
   Uses
      At line 546 in file FP1.s
      At line 558 in file FP1.s

loopmain 00000104




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: loopmain
   Definitions
      At line 314 in file FP1.s
   Uses
      At line 331 in file FP1.s
Comment: loopmain used once
resetBackToIDLE 0000016E

Symbol: resetBackToIDLE
   Definitions
      At line 399 in file FP1.s
   Uses
      At line 397 in file FP1.s
Comment: resetBackToIDLE used once
35 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DELAYTIME 00030D40

Symbol: DELAYTIME
   Definitions
      At line 79 in file FP1.s
   Uses
      At line 191 in file FP1.s
      At line 544 in file FP1.s
      At line 562 in file FP1.s

FailingSignalTime 00055730

Symbol: FailingSignalTime
   Definitions
      At line 92 in file FP1.s
   Uses
      At line 551 in file FP1.s
      At line 555 in file FP1.s

GPIOA_BRR 40010814

Symbol: GPIOA_BRR
   Definitions
      At line 35 in file FP1.s
   Uses
      None
Comment: GPIOA_BRR unused
GPIOA_BSRR 40010810

Symbol: GPIOA_BSRR
   Definitions
      At line 34 in file FP1.s
   Uses
      None
Comment: GPIOA_BSRR unused
GPIOA_CRH 40010804

Symbol: GPIOA_CRH
   Definitions
      At line 31 in file FP1.s
   Uses
      At line 142 in file FP1.s
      At line 189 in file FP1.s
      At line 302 in file FP1.s
      At line 385 in file FP1.s
      At line 540 in file FP1.s

GPIOA_CRL 40010800

Symbol: GPIOA_CRL
   Definitions
      At line 30 in file FP1.s
   Uses
      None
Comment: GPIOA_CRL unused
GPIOA_IDR 40010808

Symbol: GPIOA_IDR
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 32 in file FP1.s
   Uses
      At line 218 in file FP1.s
      At line 271 in file FP1.s

GPIOA_LCKR 40010818

Symbol: GPIOA_LCKR
   Definitions
      At line 36 in file FP1.s
   Uses
      None
Comment: GPIOA_LCKR unused
GPIOA_ODR 4001080C

Symbol: GPIOA_ODR
   Definitions
      At line 33 in file FP1.s
   Uses
      None
Comment: GPIOA_ODR unused
GPIOB_BRR 40010C14

Symbol: GPIOB_BRR
   Definitions
      At line 44 in file FP1.s
   Uses
      None
Comment: GPIOB_BRR unused
GPIOB_BSRR 40010C10

Symbol: GPIOB_BSRR
   Definitions
      At line 43 in file FP1.s
   Uses
      None
Comment: GPIOB_BSRR unused
GPIOB_CRH 40010C04

Symbol: GPIOB_CRH
   Definitions
      At line 40 in file FP1.s
   Uses
      At line 145 in file FP1.s
Comment: GPIOB_CRH used once
GPIOB_CRL 40010C00

Symbol: GPIOB_CRL
   Definitions
      At line 39 in file FP1.s
   Uses
      None
Comment: GPIOB_CRL unused
GPIOB_IDR 40010C08

Symbol: GPIOB_IDR
   Definitions
      At line 41 in file FP1.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 206 in file FP1.s
      At line 261 in file FP1.s

GPIOB_LCKR 40010C18

Symbol: GPIOB_LCKR
   Definitions
      At line 45 in file FP1.s
   Uses
      None
Comment: GPIOB_LCKR unused
GPIOB_ODR 40010C0C

Symbol: GPIOB_ODR
   Definitions
      At line 42 in file FP1.s
   Uses
      None
Comment: GPIOB_ODR unused
GPIOC_BRR 40011014

Symbol: GPIOC_BRR
   Definitions
      At line 54 in file FP1.s
   Uses
      None
Comment: GPIOC_BRR unused
GPIOC_BSRR 40011010

Symbol: GPIOC_BSRR
   Definitions
      At line 53 in file FP1.s
   Uses
      None
Comment: GPIOC_BSRR unused
GPIOC_CRH 40011004

Symbol: GPIOC_CRH
   Definitions
      At line 50 in file FP1.s
   Uses
      None
Comment: GPIOC_CRH unused
GPIOC_CRL 40011000

Symbol: GPIOC_CRL
   Definitions
      At line 49 in file FP1.s
   Uses
      None
Comment: GPIOC_CRL unused
GPIOC_IDR 40011008

Symbol: GPIOC_IDR
   Definitions
      At line 51 in file FP1.s
   Uses
      At line 212 in file FP1.s
      At line 266 in file FP1.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


GPIOC_LCKR 40011018

Symbol: GPIOC_LCKR
   Definitions
      At line 55 in file FP1.s
   Uses
      None
Comment: GPIOC_LCKR unused
GPIOC_ODR 4001100C

Symbol: GPIOC_ODR
   Definitions
      At line 52 in file FP1.s
   Uses
      None
Comment: GPIOC_ODR unused
INITIAL_MSP 20001000

Symbol: INITIAL_MSP
   Definitions
      At line 26 in file FP1.s
   Uses
      At line 98 in file FP1.s
Comment: INITIAL_MSP used once
NumberofCycles 00000010

Symbol: NumberofCycles
   Definitions
      At line 88 in file FP1.s
   Uses
      At line 598 in file FP1.s
Comment: NumberofCycles used once
PDTIME 000927C0

Symbol: PDTIME
   Definitions
      At line 76 in file FP1.s
   Uses
      None
Comment: PDTIME unused
PDTIME2 0007A120

Symbol: PDTIME2
   Definitions
      At line 77 in file FP1.s
   Uses
      At line 304 in file FP1.s
Comment: PDTIME2 used once
RCC_AHBENR 40021014

Symbol: RCC_AHBENR
   Definitions
      At line 64 in file FP1.s
   Uses
      None
Comment: RCC_AHBENR unused
RCC_APB1ENR 4002101C




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: RCC_APB1ENR
   Definitions
      At line 68 in file FP1.s
   Uses
      None
Comment: RCC_APB1ENR unused
RCC_APB1RSTR 40021010

Symbol: RCC_APB1RSTR
   Definitions
      At line 63 in file FP1.s
   Uses
      None
Comment: RCC_APB1RSTR unused
RCC_APB2ENR 40021018

Symbol: RCC_APB2ENR
   Definitions
      At line 66 in file FP1.s
   Uses
      At line 130 in file FP1.s
Comment: RCC_APB2ENR used once
RCC_APB2RSTR 4002100C

Symbol: RCC_APB2RSTR
   Definitions
      At line 62 in file FP1.s
   Uses
      None
Comment: RCC_APB2RSTR unused
RCC_BDCR 40021020

Symbol: RCC_BDCR
   Definitions
      At line 69 in file FP1.s
   Uses
      None
Comment: RCC_BDCR unused
RCC_CFGR 40021004

Symbol: RCC_CFGR
   Definitions
      At line 60 in file FP1.s
   Uses
      None
Comment: RCC_CFGR unused
RCC_CFGR2 4002102C

Symbol: RCC_CFGR2
   Definitions
      At line 71 in file FP1.s
   Uses
      None
Comment: RCC_CFGR2 unused
RCC_CIR 40021008

Symbol: RCC_CIR
   Definitions
      At line 61 in file FP1.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: RCC_CIR unused
RCC_CR 40021000

Symbol: RCC_CR
   Definitions
      At line 59 in file FP1.s
   Uses
      None
Comment: RCC_CR unused
RCC_CSR 40021024

Symbol: RCC_CSR
   Definitions
      At line 70 in file FP1.s
   Uses
      None
Comment: RCC_CSR unused
REACT_TIME 00055730

Symbol: REACT_TIME
   Definitions
      At line 86 in file FP1.s
   Uses
      At line 180 in file FP1.s
Comment: REACT_TIME used once
WinningSignalTime 00030D40

Symbol: WinningSignalTime
   Definitions
      At line 90 in file FP1.s
   Uses
      At line 389 in file FP1.s
      At line 394 in file FP1.s

40 symbols
412 symbols in table
